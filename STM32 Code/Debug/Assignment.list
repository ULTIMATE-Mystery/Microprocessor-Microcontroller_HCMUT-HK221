
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005244  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005350  08005350  00015350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  080053bc  080053bc  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053bc  080053bc  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000098  0800545c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800545c  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000caea  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252f  00000000  00000000  0002cbab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0002f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d56  00000000  00000000  00030c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e0c  00000000  00000000  0004a956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afda  00000000  00000000  0005c762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e773c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d0c  00000000  00000000  000e778c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	08005338 	.word	0x08005338

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	08005338 	.word	0x08005338

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <isButtonPressed>:

static int counter_for_button_pressed[NO_OF_BUTTONS];

static int button_flag[NO_OF_BUTTONS];

int isButtonPressed(int index){
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <isButtonPressed+0x30>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <isButtonPressed+0x22>
		button_flag[index] = 0;
 800094c:	4a06      	ldr	r2, [pc, #24]	; (8000968 <isButtonPressed+0x30>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2100      	movs	r1, #0
 8000952:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <isButtonPressed+0x24>
	}
	return 0;
 800095a:	2300      	movs	r3, #0
}
 800095c:	4618      	mov	r0, r3
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000104 	.word	0x20000104

0800096c <button_process>:

void button_process(int index){
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	if(index >= 0 && index < NO_OF_BUTTONS){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db07      	blt.n	800098a <button_process+0x1e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b03      	cmp	r3, #3
 800097e:	dc04      	bgt.n	800098a <button_process+0x1e>
		button_flag[index] = 1;
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <button_process+0x28>)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000104 	.word	0x20000104

08000998 <button_reading>:

void button_reading(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 800099e:	2300      	movs	r3, #0
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e0e5      	b.n	8000b70 <button_reading+0x1d8>
        //debouncing button
		debounce_buffer3[i] = debounce_buffer2[i];
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4976      	ldr	r1, [pc, #472]	; (8000b84 <button_reading+0x1ec>)
 80009aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ae:	4976      	ldr	r1, [pc, #472]	; (8000b88 <button_reading+0x1f0>)
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		debounce_buffer2[i] = debounce_buffer1[i];
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	4974      	ldr	r1, [pc, #464]	; (8000b8c <button_reading+0x1f4>)
 80009ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009be:	4971      	ldr	r1, [pc, #452]	; (8000b84 <button_reading+0x1ec>)
 80009c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		// readpin

		if(i == 0) debounce_buffer1[i] = HAL_GPIO_ReadPin(PedestrianButton_GPIO_Port, PedestrianButton_Pin);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d10b      	bne.n	80009e2 <button_reading+0x4a>
 80009ca:	2101      	movs	r1, #1
 80009cc:	4870      	ldr	r0, [pc, #448]	; (8000b90 <button_reading+0x1f8>)
 80009ce:	f002 f807 	bl	80029e0 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4611      	mov	r1, r2
 80009da:	4a6c      	ldr	r2, [pc, #432]	; (8000b8c <button_reading+0x1f4>)
 80009dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009e0:	e02b      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 1) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d10b      	bne.n	8000a00 <button_reading+0x68>
 80009e8:	2102      	movs	r1, #2
 80009ea:	4869      	ldr	r0, [pc, #420]	; (8000b90 <button_reading+0x1f8>)
 80009ec:	f001 fff8 	bl	80029e0 <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a64      	ldr	r2, [pc, #400]	; (8000b8c <button_reading+0x1f4>)
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009fe:	e01c      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 2) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d10b      	bne.n	8000a1e <button_reading+0x86>
 8000a06:	2110      	movs	r1, #16
 8000a08:	4861      	ldr	r0, [pc, #388]	; (8000b90 <button_reading+0x1f8>)
 8000a0a:	f001 ffe9 	bl	80029e0 <HAL_GPIO_ReadPin>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	461a      	mov	r2, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4611      	mov	r1, r2
 8000a16:	4a5d      	ldr	r2, [pc, #372]	; (8000b8c <button_reading+0x1f4>)
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1c:	e00d      	b.n	8000a3a <button_reading+0xa2>
		else if(i == 3) debounce_buffer1[i] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d10a      	bne.n	8000a3a <button_reading+0xa2>
 8000a24:	2101      	movs	r1, #1
 8000a26:	485b      	ldr	r0, [pc, #364]	; (8000b94 <button_reading+0x1fc>)
 8000a28:	f001 ffda 	bl	80029e0 <HAL_GPIO_ReadPin>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <button_reading+0x1f4>)
 8000a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


        //process after debouncing
		if((debounce_buffer3[i] == debounce_buffer2[i]) && debounce_buffer2[i] == debounce_buffer1[i]){
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a52      	ldr	r2, [pc, #328]	; (8000b88 <button_reading+0x1f0>)
 8000a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	494f      	ldr	r1, [pc, #316]	; (8000b84 <button_reading+0x1ec>)
 8000a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	f040 8084 	bne.w	8000b58 <button_reading+0x1c0>
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4a4c      	ldr	r2, [pc, #304]	; (8000b84 <button_reading+0x1ec>)
 8000a54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	494c      	ldr	r1, [pc, #304]	; (8000b8c <button_reading+0x1f4>)
 8000a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d179      	bne.n	8000b58 <button_reading+0x1c0>
			button_buffer[i] = debounce_buffer3[i];
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4947      	ldr	r1, [pc, #284]	; (8000b88 <button_reading+0x1f0>)
 8000a6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a6e:	494a      	ldr	r1, [pc, #296]	; (8000b98 <button_reading+0x200>)
 8000a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			// fsm for processing button
			switch(button_state[i]){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <button_reading+0x204>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	2b0d      	cmp	r3, #13
 8000a7e:	d043      	beq.n	8000b08 <button_reading+0x170>
 8000a80:	2b0d      	cmp	r3, #13
 8000a82:	dc6b      	bgt.n	8000b5c <button_reading+0x1c4>
 8000a84:	2b0b      	cmp	r3, #11
 8000a86:	d002      	beq.n	8000a8e <button_reading+0xf6>
 8000a88:	2b0c      	cmp	r3, #12
 8000a8a:	d02d      	beq.n	8000ae8 <button_reading+0x150>
					button_state[i] = BUTTON_IS_RELEASED;
					counter_for_button_pressed[i] = 0;
				}
				break;
			default:
				break;
 8000a8c:	e066      	b.n	8000b5c <button_reading+0x1c4>
				counter_for_button_pressed[i]++;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	4a43      	ldr	r2, [pc, #268]	; (8000ba0 <button_reading+0x208>)
 8000a92:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a96:	3201      	adds	r2, #1
 8000a98:	4941      	ldr	r1, [pc, #260]	; (8000ba0 <button_reading+0x208>)
 8000a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == WAITING_TIME/TIMER_CYCLE){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a3f      	ldr	r2, [pc, #252]	; (8000ba0 <button_reading+0x208>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	2b64      	cmp	r3, #100	; 0x64
 8000aa8:	d10d      	bne.n	8000ac6 <button_reading+0x12e>
					button_state[i] = BUTTON_IS_LONG_PRESSED;
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <button_reading+0x204>)
 8000aae:	210d      	movs	r1, #13
 8000ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a3a      	ldr	r2, [pc, #232]	; (8000ba0 <button_reading+0x208>)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff53 	bl	800096c <button_process>
				if(button_buffer[i] == RELEASED_STATE){
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a33      	ldr	r2, [pc, #204]	; (8000b98 <button_reading+0x200>)
 8000aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d146      	bne.n	8000b60 <button_reading+0x1c8>
					button_state[i] = BUTTON_IS_RELEASED;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a31      	ldr	r2, [pc, #196]	; (8000b9c <button_reading+0x204>)
 8000ad6:	210c      	movs	r1, #12
 8000ad8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <button_reading+0x208>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000ae6:	e03b      	b.n	8000b60 <button_reading+0x1c8>
				if(button_buffer[i] == PRESSED_STATE){
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4a2b      	ldr	r2, [pc, #172]	; (8000b98 <button_reading+0x200>)
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d137      	bne.n	8000b64 <button_reading+0x1cc>
					button_state[i] = BUTTON_IS_PRESSED;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <button_reading+0x204>)
 8000af8:	210b      	movs	r1, #11
 8000afa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					button_process(i);
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff33 	bl	800096c <button_process>
				break;
 8000b06:	e02d      	b.n	8000b64 <button_reading+0x1cc>
				counter_for_button_pressed[i]++;
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a25      	ldr	r2, [pc, #148]	; (8000ba0 <button_reading+0x208>)
 8000b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b10:	3201      	adds	r2, #1
 8000b12:	4923      	ldr	r1, [pc, #140]	; (8000ba0 <button_reading+0x208>)
 8000b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(counter_for_button_pressed[i] == TIME_OUT_FOR_KEY_PRESSED/TIMER_CYCLE){
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <button_reading+0x208>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2b14      	cmp	r3, #20
 8000b22:	d108      	bne.n	8000b36 <button_reading+0x19e>
					button_process(i);
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff ff20 	bl	800096c <button_process>
					counter_for_button_pressed[i] = 0;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <button_reading+0x208>)
 8000b30:	2100      	movs	r1, #0
 8000b32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(button_buffer[i] == RELEASED_STATE){
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4a17      	ldr	r2, [pc, #92]	; (8000b98 <button_reading+0x200>)
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d112      	bne.n	8000b68 <button_reading+0x1d0>
					button_state[i] = BUTTON_IS_RELEASED;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <button_reading+0x204>)
 8000b46:	210c      	movs	r1, #12
 8000b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					counter_for_button_pressed[i] = 0;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <button_reading+0x208>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8000b56:	e007      	b.n	8000b68 <button_reading+0x1d0>
			}
		}
 8000b58:	bf00      	nop
 8000b5a:	e006      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b5c:	bf00      	nop
 8000b5e:	e004      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b60:	bf00      	nop
 8000b62:	e002      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b64:	bf00      	nop
 8000b66:	e000      	b.n	8000b6a <button_reading+0x1d2>
				break;
 8000b68:	bf00      	nop
	for(uint8_t i = 0 ; i < NO_OF_BUTTONS; i++){
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	f67f af16 	bls.w	80009a4 <button_reading+0xc>
	}
}
 8000b78:	bf00      	nop
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	200000d4 	.word	0x200000d4
 8000b88:	200000e4 	.word	0x200000e4
 8000b8c:	200000c4 	.word	0x200000c4
 8000b90:	40010800 	.word	0x40010800
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	200000b4 	.word	0x200000b4
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	200000f4 	.word	0x200000f4

08000ba4 <fsm_auto_run>:


#include "fsm_auto.h"

void fsm_auto_run(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	switch (status)
 8000ba8:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <fsm_auto_run+0x200>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	3b01      	subs	r3, #1
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	f200 80f6 	bhi.w	8000da0 <fsm_auto_run+0x1fc>
 8000bb4:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <fsm_auto_run+0x18>)
 8000bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bba:	bf00      	nop
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000bf5 	.word	0x08000bf5
 8000bc4:	08000c59 	.word	0x08000c59
 8000bc8:	08000cc3 	.word	0x08000cc3
 8000bcc:	08000d29 	.word	0x08000d29
	{
	case INIT:
		status=AUTO_RED_GREEN;
 8000bd0:	4b74      	ldr	r3, [pc, #464]	; (8000da4 <fsm_auto_run+0x200>)
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
		setTimer1(1000);
 8000bd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bda:	f001 f8c1 	bl	8001d60 <setTimer1>
		counter = max_red1;
 8000bde:	4b72      	ldr	r3, [pc, #456]	; (8000da8 <fsm_auto_run+0x204>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a72      	ldr	r2, [pc, #456]	; (8000dac <fsm_auto_run+0x208>)
 8000be4:	6013      	str	r3, [r2, #0]
		displayCounter();
 8000be6:	f001 fb03 	bl	80021f0 <displayCounter>
		setTraffic1Red();
 8000bea:	f001 f93f 	bl	8001e6c <setTraffic1Red>
		setTraffic2Green();
 8000bee:	f001 f989 	bl	8001f04 <setTraffic2Green>
		break;
 8000bf2:	e0d5      	b.n	8000da0 <fsm_auto_run+0x1fc>
	case AUTO_RED_GREEN:
		if(timer1_flag == 1){
 8000bf4:	4b6e      	ldr	r3, [pc, #440]	; (8000db0 <fsm_auto_run+0x20c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d115      	bne.n	8000c28 <fsm_auto_run+0x84>
			counter--;
 8000bfc:	4b6b      	ldr	r3, [pc, #428]	; (8000dac <fsm_auto_run+0x208>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	4a6a      	ldr	r2, [pc, #424]	; (8000dac <fsm_auto_run+0x208>)
 8000c04:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0a:	f001 f8a9 	bl	8001d60 <setTimer1>
			if(counter == max_yellow2){
 8000c0e:	4b67      	ldr	r3, [pc, #412]	; (8000dac <fsm_auto_run+0x208>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b68      	ldr	r3, [pc, #416]	; (8000db4 <fsm_auto_run+0x210>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d104      	bne.n	8000c24 <fsm_auto_run+0x80>
				setTraffic2Yellow();
 8000c1a:	f001 f997 	bl	8001f4c <setTraffic2Yellow>
				status=AUTO_RED_YELLOW;
 8000c1e:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <fsm_auto_run+0x200>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c24:	f001 fae4 	bl	80021f0 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f7ff fe85 	bl	8000938 <isButtonPressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	f000 80ae 	beq.w	8000d92 <fsm_auto_run+0x1ee>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status=MAN_RED_GREEN;
 8000c36:	4b5b      	ldr	r3, [pc, #364]	; (8000da4 <fsm_auto_run+0x200>)
 8000c38:	220b      	movs	r2, #11
 8000c3a:	601a      	str	r2, [r3, #0]
			setTimer1(30000);
 8000c3c:	f247 5030 	movw	r0, #30000	; 0x7530
 8000c40:	f001 f88e 	bl	8001d60 <setTimer1>
			setTraffic1Red();
 8000c44:	f001 f912 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 8000c48:	f001 f95c 	bl	8001f04 <setTraffic2Green>
			counter = 0;
 8000c4c:	4b57      	ldr	r3, [pc, #348]	; (8000dac <fsm_auto_run+0x208>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000c52:	f001 facd 	bl	80021f0 <displayCounter>
			break;
 8000c56:	e0a3      	b.n	8000da0 <fsm_auto_run+0x1fc>
		}
		break;
	case AUTO_RED_YELLOW:
		if(timer1_flag == 1){
 8000c58:	4b55      	ldr	r3, [pc, #340]	; (8000db0 <fsm_auto_run+0x20c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d119      	bne.n	8000c94 <fsm_auto_run+0xf0>
			counter--;
 8000c60:	4b52      	ldr	r3, [pc, #328]	; (8000dac <fsm_auto_run+0x208>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	4a51      	ldr	r2, [pc, #324]	; (8000dac <fsm_auto_run+0x208>)
 8000c68:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6e:	f001 f877 	bl	8001d60 <setTimer1>
			if(counter == 0){
 8000c72:	4b4e      	ldr	r3, [pc, #312]	; (8000dac <fsm_auto_run+0x208>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10a      	bne.n	8000c90 <fsm_auto_run+0xec>
				counter = max_green1;
 8000c7a:	4b4f      	ldr	r3, [pc, #316]	; (8000db8 <fsm_auto_run+0x214>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a4b      	ldr	r2, [pc, #300]	; (8000dac <fsm_auto_run+0x208>)
 8000c80:	6013      	str	r3, [r2, #0]
				setTraffic1Green();
 8000c82:	f001 f917 	bl	8001eb4 <setTraffic1Green>
				setTraffic2Red();
 8000c86:	f001 f905 	bl	8001e94 <setTraffic2Red>
				status=AUTO_GREEN_RED;
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <fsm_auto_run+0x200>)
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000c90:	f001 faae 	bl	80021f0 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fe4f 	bl	8000938 <isButtonPressed>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d07a      	beq.n	8000d96 <fsm_auto_run+0x1f2>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status=MAN_RED_GREEN;
 8000ca0:	4b40      	ldr	r3, [pc, #256]	; (8000da4 <fsm_auto_run+0x200>)
 8000ca2:	220b      	movs	r2, #11
 8000ca4:	601a      	str	r2, [r3, #0]
			setTimer1(30000);
 8000ca6:	f247 5030 	movw	r0, #30000	; 0x7530
 8000caa:	f001 f859 	bl	8001d60 <setTimer1>
			setTraffic1Red();
 8000cae:	f001 f8dd 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 8000cb2:	f001 f927 	bl	8001f04 <setTraffic2Green>
			counter = 0;
 8000cb6:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <fsm_auto_run+0x208>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000cbc:	f001 fa98 	bl	80021f0 <displayCounter>
			break;
 8000cc0:	e06e      	b.n	8000da0 <fsm_auto_run+0x1fc>
		}
		break;

	case AUTO_GREEN_RED:
		if(timer1_flag == 1){
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <fsm_auto_run+0x20c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d117      	bne.n	8000cfa <fsm_auto_run+0x156>
			counter--;
 8000cca:	4b38      	ldr	r3, [pc, #224]	; (8000dac <fsm_auto_run+0x208>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a36      	ldr	r2, [pc, #216]	; (8000dac <fsm_auto_run+0x208>)
 8000cd2:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f001 f842 	bl	8001d60 <setTimer1>
			if(counter == 0){
 8000cdc:	4b33      	ldr	r3, [pc, #204]	; (8000dac <fsm_auto_run+0x208>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d108      	bne.n	8000cf6 <fsm_auto_run+0x152>
				counter = max_yellow1;
 8000ce4:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <fsm_auto_run+0x218>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a30      	ldr	r2, [pc, #192]	; (8000dac <fsm_auto_run+0x208>)
 8000cea:	6013      	str	r3, [r2, #0]
				setTraffic1Yellow();
 8000cec:	f001 f91a 	bl	8001f24 <setTraffic1Yellow>
				status=AUTO_YELLOW_RED;
 8000cf0:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <fsm_auto_run+0x200>)
 8000cf2:	2205      	movs	r2, #5
 8000cf4:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000cf6:	f001 fa7b 	bl	80021f0 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff fe1c 	bl	8000938 <isButtonPressed>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d049      	beq.n	8000d9a <fsm_auto_run+0x1f6>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status=MAN_RED_GREEN;
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <fsm_auto_run+0x200>)
 8000d08:	220b      	movs	r2, #11
 8000d0a:	601a      	str	r2, [r3, #0]
			setTimer1(30000);
 8000d0c:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d10:	f001 f826 	bl	8001d60 <setTimer1>
			setTraffic1Red();
 8000d14:	f001 f8aa 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 8000d18:	f001 f8f4 	bl	8001f04 <setTraffic2Green>
			counter = 0;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <fsm_auto_run+0x208>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000d22:	f001 fa65 	bl	80021f0 <displayCounter>
			break;
 8000d26:	e03b      	b.n	8000da0 <fsm_auto_run+0x1fc>
		}
		break;

	case AUTO_YELLOW_RED:

		if(timer1_flag == 1){
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <fsm_auto_run+0x20c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d119      	bne.n	8000d64 <fsm_auto_run+0x1c0>
			counter--;
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <fsm_auto_run+0x208>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	4a1d      	ldr	r2, [pc, #116]	; (8000dac <fsm_auto_run+0x208>)
 8000d38:	6013      	str	r3, [r2, #0]
			setTimer1(1000);
 8000d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d3e:	f001 f80f 	bl	8001d60 <setTimer1>
			if(counter == 0){
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <fsm_auto_run+0x208>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10a      	bne.n	8000d60 <fsm_auto_run+0x1bc>
				counter = max_red1;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <fsm_auto_run+0x204>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <fsm_auto_run+0x208>)
 8000d50:	6013      	str	r3, [r2, #0]
				setTraffic1Red();
 8000d52:	f001 f88b 	bl	8001e6c <setTraffic1Red>
				setTraffic2Green();
 8000d56:	f001 f8d5 	bl	8001f04 <setTraffic2Green>
				status=AUTO_RED_GREEN;
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <fsm_auto_run+0x200>)
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 8000d60:	f001 fa46 	bl	80021f0 <displayCounter>
		}

		if(isButtonPressed(1)){
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff fde7 	bl	8000938 <isButtonPressed>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d016      	beq.n	8000d9e <fsm_auto_run+0x1fa>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status=MAN_RED_GREEN;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <fsm_auto_run+0x200>)
 8000d72:	220b      	movs	r2, #11
 8000d74:	601a      	str	r2, [r3, #0]
			setTimer1(30000);
 8000d76:	f247 5030 	movw	r0, #30000	; 0x7530
 8000d7a:	f000 fff1 	bl	8001d60 <setTimer1>
			setTraffic1Red();
 8000d7e:	f001 f875 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 8000d82:	f001 f8bf 	bl	8001f04 <setTraffic2Green>
			counter = 0;
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <fsm_auto_run+0x208>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
			displayCounter();
 8000d8c:	f001 fa30 	bl	80021f0 <displayCounter>
			break;
 8000d90:	e006      	b.n	8000da0 <fsm_auto_run+0x1fc>
		break;
 8000d92:	bf00      	nop
 8000d94:	e004      	b.n	8000da0 <fsm_auto_run+0x1fc>
		break;
 8000d96:	bf00      	nop
 8000d98:	e002      	b.n	8000da0 <fsm_auto_run+0x1fc>
		break;
 8000d9a:	bf00      	nop
 8000d9c:	e000      	b.n	8000da0 <fsm_auto_run+0x1fc>
		}
		break;
 8000d9e:	bf00      	nop
	}

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000118 	.word	0x20000118
 8000da8:	20000010 	.word	0x20000010
 8000dac:	20000120 	.word	0x20000120
 8000db0:	20000528 	.word	0x20000528
 8000db4:	20000024 	.word	0x20000024
 8000db8:	20000014 	.word	0x20000014
 8000dbc:	20000018 	.word	0x20000018

08000dc0 <fsm_manual_run>:

#include "fsm_manual.h"

void fsm_manual_run(){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	switch (status) {
 8000dc4:	4b8c      	ldr	r3, [pc, #560]	; (8000ff8 <fsm_manual_run+0x238>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3b0b      	subs	r3, #11
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	f200 8108 	bhi.w	8000fe0 <fsm_manual_run+0x220>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <fsm_manual_run+0x18>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000de9 	.word	0x08000de9
 8000ddc:	08000e69 	.word	0x08000e69
 8000de0:	08000ee7 	.word	0x08000ee7
 8000de4:	08000f63 	.word	0x08000f63
		case MAN_RED_GREEN:
			//isButtonPressed(3);
			if(timer1_flag) {
 8000de8:	4b84      	ldr	r3, [pc, #528]	; (8000ffc <fsm_manual_run+0x23c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d010      	beq.n	8000e12 <fsm_manual_run+0x52>
				status = AUTO_RED_YELLOW;
 8000df0:	4b81      	ldr	r3, [pc, #516]	; (8000ff8 <fsm_manual_run+0x238>)
 8000df2:	2203      	movs	r2, #3
 8000df4:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000df6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dfa:	f000 ffb1 	bl	8001d60 <setTimer1>
				counter = max_yellow2;
 8000dfe:	4b80      	ldr	r3, [pc, #512]	; (8001000 <fsm_manual_run+0x240>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a80      	ldr	r2, [pc, #512]	; (8001004 <fsm_manual_run+0x244>)
 8000e04:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e06:	f001 f9f3 	bl	80021f0 <displayCounter>
				setTraffic1Red();
 8000e0a:	f001 f82f 	bl	8001e6c <setTraffic1Red>
				setTraffic2Yellow();
 8000e0e:	f001 f89d 	bl	8001f4c <setTraffic2Yellow>
			}

			if(isButtonPressed(1)){
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff fd90 	bl	8000938 <isButtonPressed>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d011      	beq.n	8000e42 <fsm_manual_run+0x82>
				//isButtonPressed(2);
				status = TUNING_RED1;
 8000e1e:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <fsm_manual_run+0x238>)
 8000e20:	2215      	movs	r2, #21
 8000e22:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e28:	f000 ff9a 	bl	8001d60 <setTimer1>
				counter = max_red1;
 8000e2c:	4b76      	ldr	r3, [pc, #472]	; (8001008 <fsm_manual_run+0x248>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a74      	ldr	r2, [pc, #464]	; (8001004 <fsm_manual_run+0x244>)
 8000e32:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e34:	f001 f9dc 	bl	80021f0 <displayCounter>
				clearTraffic1();
 8000e38:	f001 f850 	bl	8001edc <clearTraffic1>
				clearTraffic2();
 8000e3c:	f001 f896 	bl	8001f6c <clearTraffic2>
				break;
 8000e40:	e0d7      	b.n	8000ff2 <fsm_manual_run+0x232>
			}

			if (isButtonPressed(2)) {
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff fd78 	bl	8000938 <isButtonPressed>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 80ca 	beq.w	8000fe4 <fsm_manual_run+0x224>
				status = MAN_RED_YELLOW;
 8000e50:	4b69      	ldr	r3, [pc, #420]	; (8000ff8 <fsm_manual_run+0x238>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000e56:	f001 f809 	bl	8001e6c <setTraffic1Red>
				setTraffic2Yellow();
 8000e5a:	f001 f877 	bl	8001f4c <setTraffic2Yellow>
				setTimer1(30000);
 8000e5e:	f247 5030 	movw	r0, #30000	; 0x7530
 8000e62:	f000 ff7d 	bl	8001d60 <setTimer1>
			}
			break;
 8000e66:	e0bd      	b.n	8000fe4 <fsm_manual_run+0x224>

		case MAN_RED_YELLOW:
			//isButtonPressed(3);
			if(timer1_flag) {
 8000e68:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <fsm_manual_run+0x23c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d010      	beq.n	8000e92 <fsm_manual_run+0xd2>
				status = AUTO_GREEN_RED;
 8000e70:	4b61      	ldr	r3, [pc, #388]	; (8000ff8 <fsm_manual_run+0x238>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e7a:	f000 ff71 	bl	8001d60 <setTimer1>
				counter = max_green1;
 8000e7e:	4b63      	ldr	r3, [pc, #396]	; (800100c <fsm_manual_run+0x24c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a60      	ldr	r2, [pc, #384]	; (8001004 <fsm_manual_run+0x244>)
 8000e84:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000e86:	f001 f9b3 	bl	80021f0 <displayCounter>
				setTraffic1Green();
 8000e8a:	f001 f813 	bl	8001eb4 <setTraffic1Green>
				setTraffic2Red();
 8000e8e:	f001 f801 	bl	8001e94 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000e92:	2001      	movs	r0, #1
 8000e94:	f7ff fd50 	bl	8000938 <isButtonPressed>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d010      	beq.n	8000ec0 <fsm_manual_run+0x100>
				//isButtonPressed(2);
				status = TUNING_RED1;
 8000e9e:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <fsm_manual_run+0x238>)
 8000ea0:	2215      	movs	r2, #21
 8000ea2:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea8:	f000 ff5a 	bl	8001d60 <setTimer1>
				counter = max_red1;
 8000eac:	4b56      	ldr	r3, [pc, #344]	; (8001008 <fsm_manual_run+0x248>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a54      	ldr	r2, [pc, #336]	; (8001004 <fsm_manual_run+0x244>)
 8000eb2:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000eb4:	f001 f99c 	bl	80021f0 <displayCounter>
				clearTraffic1();
 8000eb8:	f001 f810 	bl	8001edc <clearTraffic1>
				clearTraffic2();
 8000ebc:	f001 f856 	bl	8001f6c <clearTraffic2>
				//isButtonPressed(2);
			}

			if (isButtonPressed(2)) {
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff fd39 	bl	8000938 <isButtonPressed>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 808d 	beq.w	8000fe8 <fsm_manual_run+0x228>
				status = MAN_GREEN_RED;
 8000ece:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <fsm_manual_run+0x238>)
 8000ed0:	220d      	movs	r2, #13
 8000ed2:	601a      	str	r2, [r3, #0]
				setTraffic1Green();
 8000ed4:	f000 ffee 	bl	8001eb4 <setTraffic1Green>
				setTraffic2Red();
 8000ed8:	f000 ffdc 	bl	8001e94 <setTraffic2Red>
				setTimer1(30000);
 8000edc:	f247 5030 	movw	r0, #30000	; 0x7530
 8000ee0:	f000 ff3e 	bl	8001d60 <setTimer1>
			}


			break;
 8000ee4:	e080      	b.n	8000fe8 <fsm_manual_run+0x228>

		case MAN_GREEN_RED:
			//isButtonPressed(3);
			if(timer1_flag) {
 8000ee6:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <fsm_manual_run+0x23c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d010      	beq.n	8000f10 <fsm_manual_run+0x150>
				status = AUTO_YELLOW_RED;
 8000eee:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <fsm_manual_run+0x238>)
 8000ef0:	2205      	movs	r2, #5
 8000ef2:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f000 ff32 	bl	8001d60 <setTimer1>
				counter = max_yellow1;
 8000efc:	4b44      	ldr	r3, [pc, #272]	; (8001010 <fsm_manual_run+0x250>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a40      	ldr	r2, [pc, #256]	; (8001004 <fsm_manual_run+0x244>)
 8000f02:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f04:	f001 f974 	bl	80021f0 <displayCounter>
				setTraffic1Yellow();
 8000f08:	f001 f80c 	bl	8001f24 <setTraffic1Yellow>
				setTraffic2Red();
 8000f0c:	f000 ffc2 	bl	8001e94 <setTraffic2Red>
			}

			if(isButtonPressed(1)) {
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fd11 	bl	8000938 <isButtonPressed>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d010      	beq.n	8000f3e <fsm_manual_run+0x17e>
				//isButtonPressed(2);
				status = TUNING_RED1;
 8000f1c:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <fsm_manual_run+0x238>)
 8000f1e:	2215      	movs	r2, #21
 8000f20:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f000 ff1b 	bl	8001d60 <setTimer1>
				counter = max_red1;
 8000f2a:	4b37      	ldr	r3, [pc, #220]	; (8001008 <fsm_manual_run+0x248>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a35      	ldr	r2, [pc, #212]	; (8001004 <fsm_manual_run+0x244>)
 8000f30:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f32:	f001 f95d 	bl	80021f0 <displayCounter>
				clearTraffic1();
 8000f36:	f000 ffd1 	bl	8001edc <clearTraffic1>
				clearTraffic2();
 8000f3a:	f001 f817 	bl	8001f6c <clearTraffic2>
				//isButtonPressed(2);
			}

			if (isButtonPressed(2)) {
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f7ff fcfa 	bl	8000938 <isButtonPressed>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d050      	beq.n	8000fec <fsm_manual_run+0x22c>
				status = MAN_YELLOW_RED;
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	; (8000ff8 <fsm_manual_run+0x238>)
 8000f4c:	220e      	movs	r2, #14
 8000f4e:	601a      	str	r2, [r3, #0]
				setTraffic1Yellow();
 8000f50:	f000 ffe8 	bl	8001f24 <setTraffic1Yellow>
				setTraffic2Red();
 8000f54:	f000 ff9e 	bl	8001e94 <setTraffic2Red>
				setTimer1(30000);
 8000f58:	f247 5030 	movw	r0, #30000	; 0x7530
 8000f5c:	f000 ff00 	bl	8001d60 <setTimer1>
			}

			break;
 8000f60:	e044      	b.n	8000fec <fsm_manual_run+0x22c>

		case MAN_YELLOW_RED:
			//isButtonPressed(3);
			if(timer1_flag) {
 8000f62:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <fsm_manual_run+0x23c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d010      	beq.n	8000f8c <fsm_manual_run+0x1cc>
				status = AUTO_RED_GREEN;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <fsm_manual_run+0x238>)
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f74:	f000 fef4 	bl	8001d60 <setTimer1>
				counter = max_red1;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <fsm_manual_run+0x248>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <fsm_manual_run+0x244>)
 8000f7e:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000f80:	f001 f936 	bl	80021f0 <displayCounter>
				setTraffic1Red();
 8000f84:	f000 ff72 	bl	8001e6c <setTraffic1Red>
				setTraffic2Green();
 8000f88:	f000 ffbc 	bl	8001f04 <setTraffic2Green>
			}

			if(isButtonPressed(1)) {
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f7ff fcd3 	bl	8000938 <isButtonPressed>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d011      	beq.n	8000fbc <fsm_manual_run+0x1fc>
				//isButtonPressed(2);
				status = TUNING_RED1;
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <fsm_manual_run+0x238>)
 8000f9a:	2215      	movs	r2, #21
 8000f9c:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000f9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa2:	f000 fedd 	bl	8001d60 <setTimer1>
				counter = max_red1;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <fsm_manual_run+0x248>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <fsm_manual_run+0x244>)
 8000fac:	6013      	str	r3, [r2, #0]
				displayCounter();
 8000fae:	f001 f91f 	bl	80021f0 <displayCounter>
				clearTraffic1();
 8000fb2:	f000 ff93 	bl	8001edc <clearTraffic1>
				clearTraffic2();
 8000fb6:	f000 ffd9 	bl	8001f6c <clearTraffic2>
				break;
 8000fba:	e01a      	b.n	8000ff2 <fsm_manual_run+0x232>
			}

			if (isButtonPressed(2)) {
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f7ff fcbb 	bl	8000938 <isButtonPressed>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <fsm_manual_run+0x230>
				status = MAN_RED_GREEN;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <fsm_manual_run+0x238>)
 8000fca:	220b      	movs	r2, #11
 8000fcc:	601a      	str	r2, [r3, #0]
				setTraffic1Red();
 8000fce:	f000 ff4d 	bl	8001e6c <setTraffic1Red>
				setTraffic2Green();
 8000fd2:	f000 ff97 	bl	8001f04 <setTraffic2Green>
				setTimer1(30000);
 8000fd6:	f247 5030 	movw	r0, #30000	; 0x7530
 8000fda:	f000 fec1 	bl	8001d60 <setTimer1>
			}


			break;
 8000fde:	e007      	b.n	8000ff0 <fsm_manual_run+0x230>
		default:
			break;
 8000fe0:	bf00      	nop
 8000fe2:	e006      	b.n	8000ff2 <fsm_manual_run+0x232>
			break;
 8000fe4:	bf00      	nop
 8000fe6:	e004      	b.n	8000ff2 <fsm_manual_run+0x232>
			break;
 8000fe8:	bf00      	nop
 8000fea:	e002      	b.n	8000ff2 <fsm_manual_run+0x232>
			break;
 8000fec:	bf00      	nop
 8000fee:	e000      	b.n	8000ff2 <fsm_manual_run+0x232>
			break;
 8000ff0:	bf00      	nop
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000118 	.word	0x20000118
 8000ffc:	20000528 	.word	0x20000528
 8001000:	20000024 	.word	0x20000024
 8001004:	20000120 	.word	0x20000120
 8001008:	20000010 	.word	0x20000010
 800100c:	20000014 	.word	0x20000014
 8001010:	20000018 	.word	0x20000018

08001014 <fsm_pedestrian_run>:

#include "fsm_pedestrian.h"

int PWM = 0;

void fsm_pedestrian_run(){
 8001014:	b5b0      	push	{r4, r5, r7, lr}
 8001016:	af00      	add	r7, sp, #0
	switch(pedestrianStatus) {
 8001018:	4b5a      	ldr	r3, [pc, #360]	; (8001184 <fsm_pedestrian_run+0x170>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3b01      	subs	r3, #1
 800101e:	2b03      	cmp	r3, #3
 8001020:	f200 80a6 	bhi.w	8001170 <fsm_pedestrian_run+0x15c>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <fsm_pedestrian_run+0x18>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	0800103d 	.word	0x0800103d
 8001030:	08001049 	.word	0x08001049
 8001034:	08001095 	.word	0x08001095
 8001038:	080010c9 	.word	0x080010c9
		case INIT:
			clearPedestrian();
 800103c:	f000 ffce 	bl	8001fdc <clearPedestrian>
			pedestrianStatus = PED_NONE;
 8001040:	4b50      	ldr	r3, [pc, #320]	; (8001184 <fsm_pedestrian_run+0x170>)
 8001042:	2202      	movs	r2, #2
 8001044:	601a      	str	r2, [r3, #0]
			break;
 8001046:	e09a      	b.n	800117e <fsm_pedestrian_run+0x16a>
		case PED_NONE:
			if(isButtonPressed(0)){
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fc75 	bl	8000938 <isButtonPressed>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 808f 	beq.w	8001174 <fsm_pedestrian_run+0x160>
				if(status == AUTO_RED_GREEN || status == AUTO_RED_YELLOW){
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <fsm_pedestrian_run+0x174>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d003      	beq.n	8001066 <fsm_pedestrian_run+0x52>
 800105e:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <fsm_pedestrian_run+0x174>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d108      	bne.n	8001078 <fsm_pedestrian_run+0x64>
					pedestrianStatus = PED_GREEN;
 8001066:	4b47      	ldr	r3, [pc, #284]	; (8001184 <fsm_pedestrian_run+0x170>)
 8001068:	2204      	movs	r2, #4
 800106a:	601a      	str	r2, [r3, #0]
					setPedestrianGreen();
 800106c:	f000 ffa2 	bl	8001fb4 <setPedestrianGreen>
					setTimer2(250);
 8001070:	20fa      	movs	r0, #250	; 0xfa
 8001072:	f000 fe91 	bl	8001d98 <setTimer2>
				else if (status == AUTO_GREEN_RED || status == AUTO_YELLOW_RED){
					pedestrianStatus = PED_RED;
					setPedestrianRed();
				}
			}
			break;
 8001076:	e07d      	b.n	8001174 <fsm_pedestrian_run+0x160>
				else if (status == AUTO_GREEN_RED || status == AUTO_YELLOW_RED){
 8001078:	4b43      	ldr	r3, [pc, #268]	; (8001188 <fsm_pedestrian_run+0x174>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d003      	beq.n	8001088 <fsm_pedestrian_run+0x74>
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <fsm_pedestrian_run+0x174>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b05      	cmp	r3, #5
 8001086:	d175      	bne.n	8001174 <fsm_pedestrian_run+0x160>
					pedestrianStatus = PED_RED;
 8001088:	4b3e      	ldr	r3, [pc, #248]	; (8001184 <fsm_pedestrian_run+0x170>)
 800108a:	2203      	movs	r2, #3
 800108c:	601a      	str	r2, [r3, #0]
					setPedestrianRed();
 800108e:	f000 ff7d 	bl	8001f8c <setPedestrianRed>
			break;
 8001092:	e06f      	b.n	8001174 <fsm_pedestrian_run+0x160>
		case PED_RED:
			if(timer2_flag){
 8001094:	4b3d      	ldr	r3, [pc, #244]	; (800118c <fsm_pedestrian_run+0x178>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <fsm_pedestrian_run+0x9a>
				timer2_flag = 0;
 800109c:	4b3b      	ldr	r3, [pc, #236]	; (800118c <fsm_pedestrian_run+0x178>)
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
				pedestrianStatus = PED_NONE;
 80010a2:	4b38      	ldr	r3, [pc, #224]	; (8001184 <fsm_pedestrian_run+0x170>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	601a      	str	r2, [r3, #0]
				clearPedestrian();
 80010a8:	f000 ff98 	bl	8001fdc <clearPedestrian>
				break;
 80010ac:	e067      	b.n	800117e <fsm_pedestrian_run+0x16a>
			}
			else if(status == AUTO_RED_GREEN){
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <fsm_pedestrian_run+0x174>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d160      	bne.n	8001178 <fsm_pedestrian_run+0x164>
				pedestrianStatus = PED_GREEN;
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <fsm_pedestrian_run+0x170>)
 80010b8:	2204      	movs	r2, #4
 80010ba:	601a      	str	r2, [r3, #0]
				setPedestrianGreen();
 80010bc:	f000 ff7a 	bl	8001fb4 <setPedestrianGreen>
				setTimer2(250);
 80010c0:	20fa      	movs	r0, #250	; 0xfa
 80010c2:	f000 fe69 	bl	8001d98 <setTimer2>
			}
			break;
 80010c6:	e057      	b.n	8001178 <fsm_pedestrian_run+0x164>
		case PED_GREEN:
			if(timer2_flag){
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <fsm_pedestrian_run+0x178>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d039      	beq.n	8001144 <fsm_pedestrian_run+0x130>
				if(PWM == 0){
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <fsm_pedestrian_run+0x17c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d12a      	bne.n	800112e <fsm_pedestrian_run+0x11a>
					PWM = 63-63*counter/(double)max_red1;
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <fsm_pedestrian_run+0x180>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4613      	mov	r3, r2
 80010de:	019b      	lsls	r3, r3, #6
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f984 	bl	80003f0 <__aeabi_i2d>
 80010e8:	4604      	mov	r4, r0
 80010ea:	460d      	mov	r5, r1
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <fsm_pedestrian_run+0x184>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f97d 	bl	80003f0 <__aeabi_i2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fb0b 	bl	8000718 <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4924      	ldr	r1, [pc, #144]	; (800119c <fsm_pedestrian_run+0x188>)
 800110c:	f7ff f822 	bl	8000154 <__aeabi_dsub>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4610      	mov	r0, r2
 8001116:	4619      	mov	r1, r3
 8001118:	f7ff fbe6 	bl	80008e8 <__aeabi_d2iz>
 800111c:	4603      	mov	r3, r0
 800111e:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <fsm_pedestrian_run+0x17c>)
 8001120:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <fsm_pedestrian_run+0x17c>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <fsm_pedestrian_run+0x18c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	635a      	str	r2, [r3, #52]	; 0x34
 800112c:	e007      	b.n	800113e <fsm_pedestrian_run+0x12a>
				} else {
					PWM = 0;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <fsm_pedestrian_run+0x17c>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,PWM);
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <fsm_pedestrian_run+0x17c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <fsm_pedestrian_run+0x18c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
				}
				setTimer2(250);
 800113e:	20fa      	movs	r0, #250	; 0xfa
 8001140:	f000 fe2a 	bl	8001d98 <setTimer2>
			}
			if(status == AUTO_GREEN_RED || status == AUTO_YELLOW_RED){
 8001144:	4b10      	ldr	r3, [pc, #64]	; (8001188 <fsm_pedestrian_run+0x174>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b04      	cmp	r3, #4
 800114a:	d003      	beq.n	8001154 <fsm_pedestrian_run+0x140>
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <fsm_pedestrian_run+0x174>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b05      	cmp	r3, #5
 8001152:	d113      	bne.n	800117c <fsm_pedestrian_run+0x168>
				pedestrianStatus = PED_RED;
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <fsm_pedestrian_run+0x170>)
 8001156:	2203      	movs	r2, #3
 8001158:	601a      	str	r2, [r3, #0]
				setTimer2(2000);
 800115a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800115e:	f000 fe1b 	bl	8001d98 <setTimer2>
				setPedestrianRed();
 8001162:	f000 ff13 	bl	8001f8c <setPedestrianRed>
				__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,0);
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <fsm_pedestrian_run+0x18c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	635a      	str	r2, [r3, #52]	; 0x34
			}
			break;
 800116e:	e005      	b.n	800117c <fsm_pedestrian_run+0x168>
		default:
			break;
 8001170:	bf00      	nop
 8001172:	e004      	b.n	800117e <fsm_pedestrian_run+0x16a>
			break;
 8001174:	bf00      	nop
 8001176:	e002      	b.n	800117e <fsm_pedestrian_run+0x16a>
			break;
 8001178:	bf00      	nop
 800117a:	e000      	b.n	800117e <fsm_pedestrian_run+0x16a>
			break;
 800117c:	bf00      	nop
	}
}
 800117e:	bf00      	nop
 8001180:	bdb0      	pop	{r4, r5, r7, pc}
 8001182:	bf00      	nop
 8001184:	2000011c 	.word	0x2000011c
 8001188:	20000118 	.word	0x20000118
 800118c:	2000052c 	.word	0x2000052c
 8001190:	20000114 	.word	0x20000114
 8001194:	20000120 	.word	0x20000120
 8001198:	20000010 	.word	0x20000010
 800119c:	404f8000 	.word	0x404f8000
 80011a0:	20000178 	.word	0x20000178

080011a4 <fsm_tuning_run>:

#include "fsm_tuning.h"

void fsm_tuning_run(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	switch(status){
 80011a8:	4bae      	ldr	r3, [pc, #696]	; (8001464 <fsm_tuning_run+0x2c0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3b15      	subs	r3, #21
 80011ae:	2b05      	cmp	r3, #5
 80011b0:	f200 8230 	bhi.w	8001614 <fsm_tuning_run+0x470>
 80011b4:	a201      	add	r2, pc, #4	; (adr r2, 80011bc <fsm_tuning_run+0x18>)
 80011b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ba:	bf00      	nop
 80011bc:	080011d5 	.word	0x080011d5
 80011c0:	08001283 	.word	0x08001283
 80011c4:	08001331 	.word	0x08001331
 80011c8:	080013e3 	.word	0x080013e3
 80011cc:	080014b5 	.word	0x080014b5
 80011d0:	08001565 	.word	0x08001565
	case TUNING_RED1:

		if(timer1_flag){
 80011d4:	4ba4      	ldr	r3, [pc, #656]	; (8001468 <fsm_tuning_run+0x2c4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <fsm_tuning_run+0x4a>
			timer1_flag = 0;
 80011dc:	4ba2      	ldr	r3, [pc, #648]	; (8001468 <fsm_tuning_run+0x2c4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80011e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011e6:	f000 fdbb 	bl	8001d60 <setTimer1>
			toggleTraffic1Red();
 80011ea:	f000 ff0b 	bl	8002004 <toggleTraffic1Red>
		}

		if(isButtonPressed(1)){
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fba2 	bl	8000938 <isButtonPressed>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d013      	beq.n	8001222 <fsm_tuning_run+0x7e>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status = AUTO_RED_GREEN;
 80011fa:	4b9a      	ldr	r3, [pc, #616]	; (8001464 <fsm_tuning_run+0x2c0>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	601a      	str	r2, [r3, #0]
			acceptTraffic1Red();
 8001200:	f000 ff4a 	bl	8002098 <acceptTraffic1Red>
			setTimer1(1000);
 8001204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001208:	f000 fdaa 	bl	8001d60 <setTimer1>
			counter = max_red1;
 800120c:	4b97      	ldr	r3, [pc, #604]	; (800146c <fsm_tuning_run+0x2c8>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a97      	ldr	r2, [pc, #604]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001212:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001214:	f000 ffec 	bl	80021f0 <displayCounter>
			setTraffic1Red();
 8001218:	f000 fe28 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 800121c:	f000 fe72 	bl	8001f04 <setTraffic2Green>
			break;
 8001220:	e205      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(2)){
 8001222:	2002      	movs	r0, #2
 8001224:	f7ff fb88 	bl	8000938 <isButtonPressed>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d013      	beq.n	8001256 <fsm_tuning_run+0xb2>
			//isButtonPressed(3);
			status = TUNING_RED2;
 800122e:	4b8d      	ldr	r3, [pc, #564]	; (8001464 <fsm_tuning_run+0x2c0>)
 8001230:	2216      	movs	r2, #22
 8001232:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001238:	f000 fd92 	bl	8001d60 <setTimer1>
			acceptTraffic1Red();
 800123c:	f000 ff2c 	bl	8002098 <acceptTraffic1Red>
			counter = max_red2;
 8001240:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <fsm_tuning_run+0x2d0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a8a      	ldr	r2, [pc, #552]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001246:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001248:	f000 ffd2 	bl	80021f0 <displayCounter>
			clearTraffic1();
 800124c:	f000 fe46 	bl	8001edc <clearTraffic1>
			clearTraffic2();
 8001250:	f000 fe8c 	bl	8001f6c <clearTraffic2>
			break;
 8001254:	e1eb      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(3)){
 8001256:	2003      	movs	r0, #3
 8001258:	f7ff fb6e 	bl	8000938 <isButtonPressed>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 81da 	beq.w	8001618 <fsm_tuning_run+0x474>
			counter++;
 8001264:	4b82      	ldr	r3, [pc, #520]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a81      	ldr	r2, [pc, #516]	; (8001470 <fsm_tuning_run+0x2cc>)
 800126c:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 800126e:	4b80      	ldr	r3, [pc, #512]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b63      	cmp	r3, #99	; 0x63
 8001274:	dd02      	ble.n	800127c <fsm_tuning_run+0xd8>
				counter = 2;
 8001276:	4b7e      	ldr	r3, [pc, #504]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001278:	2202      	movs	r2, #2
 800127a:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800127c:	f000 ffb8 	bl	80021f0 <displayCounter>
		}

		break;
 8001280:	e1ca      	b.n	8001618 <fsm_tuning_run+0x474>
	case TUNING_RED2:
		if(timer1_flag){
 8001282:	4b79      	ldr	r3, [pc, #484]	; (8001468 <fsm_tuning_run+0x2c4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d008      	beq.n	800129c <fsm_tuning_run+0xf8>
			timer1_flag = 0;
 800128a:	4b77      	ldr	r3, [pc, #476]	; (8001468 <fsm_tuning_run+0x2c4>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8001290:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001294:	f000 fd64 	bl	8001d60 <setTimer1>
			toggleTraffic2Red();
 8001298:	f000 fec0 	bl	800201c <toggleTraffic2Red>
		}

		if(isButtonPressed(1)){
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fb4b 	bl	8000938 <isButtonPressed>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <fsm_tuning_run+0x12c>
			//isButtonPressed(2);
			//isButtonPressed(3);
			acceptTraffic2Red();
 80012a8:	f000 ff18 	bl	80020dc <acceptTraffic2Red>
			status = AUTO_RED_GREEN;
 80012ac:	4b6d      	ldr	r3, [pc, #436]	; (8001464 <fsm_tuning_run+0x2c0>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80012b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b6:	f000 fd53 	bl	8001d60 <setTimer1>
			counter = max_red1;
 80012ba:	4b6c      	ldr	r3, [pc, #432]	; (800146c <fsm_tuning_run+0x2c8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a6c      	ldr	r2, [pc, #432]	; (8001470 <fsm_tuning_run+0x2cc>)
 80012c0:	6013      	str	r3, [r2, #0]
			displayCounter();
 80012c2:	f000 ff95 	bl	80021f0 <displayCounter>
			setTraffic2Red();
 80012c6:	f000 fde5 	bl	8001e94 <setTraffic2Red>
			setTraffic2Green();
 80012ca:	f000 fe1b 	bl	8001f04 <setTraffic2Green>
			break;
 80012ce:	e1ae      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(2)){
 80012d0:	2002      	movs	r0, #2
 80012d2:	f7ff fb31 	bl	8000938 <isButtonPressed>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <fsm_tuning_run+0x160>
			//isButtonPressed(3);
			status = TUNING_GREEN1;
 80012dc:	4b61      	ldr	r3, [pc, #388]	; (8001464 <fsm_tuning_run+0x2c0>)
 80012de:	2217      	movs	r2, #23
 80012e0:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80012e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012e6:	f000 fd3b 	bl	8001d60 <setTimer1>
			acceptTraffic2Red();
 80012ea:	f000 fef7 	bl	80020dc <acceptTraffic2Red>
			counter = max_green1;
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <fsm_tuning_run+0x2d4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a5f      	ldr	r2, [pc, #380]	; (8001470 <fsm_tuning_run+0x2cc>)
 80012f4:	6013      	str	r3, [r2, #0]
			displayCounter();
 80012f6:	f000 ff7b 	bl	80021f0 <displayCounter>
			clearTraffic1();
 80012fa:	f000 fdef 	bl	8001edc <clearTraffic1>
			clearTraffic2();
 80012fe:	f000 fe35 	bl	8001f6c <clearTraffic2>
			break;
 8001302:	e194      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(3)){
 8001304:	2003      	movs	r0, #3
 8001306:	f7ff fb17 	bl	8000938 <isButtonPressed>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 8185 	beq.w	800161c <fsm_tuning_run+0x478>
			counter++;
 8001312:	4b57      	ldr	r3, [pc, #348]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a55      	ldr	r2, [pc, #340]	; (8001470 <fsm_tuning_run+0x2cc>)
 800131a:	6013      	str	r3, [r2, #0]
			if(counter > 99){
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <fsm_tuning_run+0x2cc>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b63      	cmp	r3, #99	; 0x63
 8001322:	dd02      	ble.n	800132a <fsm_tuning_run+0x186>
				counter = 2;
 8001324:	4b52      	ldr	r3, [pc, #328]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001326:	2202      	movs	r2, #2
 8001328:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800132a:	f000 ff61 	bl	80021f0 <displayCounter>
		}
		break;
 800132e:	e175      	b.n	800161c <fsm_tuning_run+0x478>
	case TUNING_GREEN1:

		if(timer1_flag){
 8001330:	4b4d      	ldr	r3, [pc, #308]	; (8001468 <fsm_tuning_run+0x2c4>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <fsm_tuning_run+0x1a6>
			timer1_flag = 0;
 8001338:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <fsm_tuning_run+0x2c4>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 800133e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001342:	f000 fd0d 	bl	8001d60 <setTimer1>
			toggleTraffic1Green();
 8001346:	f000 fe73 	bl	8002030 <toggleTraffic1Green>
		}

		if(isButtonPressed(1)){
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff faf4 	bl	8000938 <isButtonPressed>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d013      	beq.n	800137e <fsm_tuning_run+0x1da>
			//isButtonPressed(2);
			//isButtonPressed(3);
			acceptTraffic1Green();
 8001356:	f000 fee3 	bl	8002120 <acceptTraffic1Green>
			status = AUTO_RED_GREEN;
 800135a:	4b42      	ldr	r3, [pc, #264]	; (8001464 <fsm_tuning_run+0x2c0>)
 800135c:	2202      	movs	r2, #2
 800135e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001364:	f000 fcfc 	bl	8001d60 <setTimer1>
			counter = max_red1;
 8001368:	4b40      	ldr	r3, [pc, #256]	; (800146c <fsm_tuning_run+0x2c8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a40      	ldr	r2, [pc, #256]	; (8001470 <fsm_tuning_run+0x2cc>)
 800136e:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001370:	f000 ff3e 	bl	80021f0 <displayCounter>
			setTraffic1Red();
 8001374:	f000 fd7a 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 8001378:	f000 fdc4 	bl	8001f04 <setTraffic2Green>
			break;
 800137c:	e157      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(2)){
 800137e:	2002      	movs	r0, #2
 8001380:	f7ff fada 	bl	8000938 <isButtonPressed>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d013      	beq.n	80013b2 <fsm_tuning_run+0x20e>
			//isButtonPressed(3);
			status = TUNING_GREEN2;
 800138a:	4b36      	ldr	r3, [pc, #216]	; (8001464 <fsm_tuning_run+0x2c0>)
 800138c:	2218      	movs	r2, #24
 800138e:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001390:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001394:	f000 fce4 	bl	8001d60 <setTimer1>
			acceptTraffic1Green();
 8001398:	f000 fec2 	bl	8002120 <acceptTraffic1Green>
			counter = max_green2;
 800139c:	4b37      	ldr	r3, [pc, #220]	; (800147c <fsm_tuning_run+0x2d8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a33      	ldr	r2, [pc, #204]	; (8001470 <fsm_tuning_run+0x2cc>)
 80013a2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80013a4:	f000 ff24 	bl	80021f0 <displayCounter>
			clearTraffic1();
 80013a8:	f000 fd98 	bl	8001edc <clearTraffic1>
			clearTraffic2();
 80013ac:	f000 fdde 	bl	8001f6c <clearTraffic2>
			break;
 80013b0:	e13d      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(3)){
 80013b2:	2003      	movs	r0, #3
 80013b4:	f7ff fac0 	bl	8000938 <isButtonPressed>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8130 	beq.w	8001620 <fsm_tuning_run+0x47c>
			counter++;
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <fsm_tuning_run+0x2cc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a2a      	ldr	r2, [pc, #168]	; (8001470 <fsm_tuning_run+0x2cc>)
 80013c8:	6013      	str	r3, [r2, #0]
			if(counter == max_red2){
 80013ca:	4b29      	ldr	r3, [pc, #164]	; (8001470 <fsm_tuning_run+0x2cc>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <fsm_tuning_run+0x2d0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d102      	bne.n	80013dc <fsm_tuning_run+0x238>
				counter = 1;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <fsm_tuning_run+0x2cc>)
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80013dc:	f000 ff08 	bl	80021f0 <displayCounter>
		}
		break;
 80013e0:	e11e      	b.n	8001620 <fsm_tuning_run+0x47c>
	case TUNING_GREEN2:

		if(timer1_flag){
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <fsm_tuning_run+0x2c4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d008      	beq.n	80013fc <fsm_tuning_run+0x258>
			timer1_flag = 0;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <fsm_tuning_run+0x2c4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80013f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f4:	f000 fcb4 	bl	8001d60 <setTimer1>
			toggleTraffic2Green();
 80013f8:	f000 fe24 	bl	8002044 <toggleTraffic2Green>
		}

		if(isButtonPressed(1)){
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fa9b 	bl	8000938 <isButtonPressed>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d013      	beq.n	8001430 <fsm_tuning_run+0x28c>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status = AUTO_RED_GREEN;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <fsm_tuning_run+0x2c0>)
 800140a:	2202      	movs	r2, #2
 800140c:	601a      	str	r2, [r3, #0]
			acceptTraffic2Green();
 800140e:	f000 fea1 	bl	8002154 <acceptTraffic2Green>
			setTimer1(1000);
 8001412:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001416:	f000 fca3 	bl	8001d60 <setTimer1>
			counter = max_red1;
 800141a:	4b14      	ldr	r3, [pc, #80]	; (800146c <fsm_tuning_run+0x2c8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a14      	ldr	r2, [pc, #80]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001420:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001422:	f000 fee5 	bl	80021f0 <displayCounter>
			setTraffic1Red();
 8001426:	f000 fd21 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 800142a:	f000 fd6b 	bl	8001f04 <setTraffic2Green>
			break;
 800142e:	e0fe      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(2)){
 8001430:	2002      	movs	r0, #2
 8001432:	f7ff fa81 	bl	8000938 <isButtonPressed>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d023      	beq.n	8001484 <fsm_tuning_run+0x2e0>
			//isButtonPressed(3);
			status = TUNING_YELLOW1;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <fsm_tuning_run+0x2c0>)
 800143e:	2219      	movs	r2, #25
 8001440:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001442:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001446:	f000 fc8b 	bl	8001d60 <setTimer1>
			acceptTraffic2Green();
 800144a:	f000 fe83 	bl	8002154 <acceptTraffic2Green>
			counter = max_yellow1;
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <fsm_tuning_run+0x2dc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a07      	ldr	r2, [pc, #28]	; (8001470 <fsm_tuning_run+0x2cc>)
 8001454:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001456:	f000 fecb 	bl	80021f0 <displayCounter>
			clearTraffic1();
 800145a:	f000 fd3f 	bl	8001edc <clearTraffic1>
			clearTraffic2();
 800145e:	f000 fd85 	bl	8001f6c <clearTraffic2>
			break;
 8001462:	e0e4      	b.n	800162e <fsm_tuning_run+0x48a>
 8001464:	20000118 	.word	0x20000118
 8001468:	20000528 	.word	0x20000528
 800146c:	20000010 	.word	0x20000010
 8001470:	20000120 	.word	0x20000120
 8001474:	2000001c 	.word	0x2000001c
 8001478:	20000014 	.word	0x20000014
 800147c:	20000020 	.word	0x20000020
 8001480:	20000018 	.word	0x20000018
		}

		if(isButtonPressed(3)){
 8001484:	2003      	movs	r0, #3
 8001486:	f7ff fa57 	bl	8000938 <isButtonPressed>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80c9 	beq.w	8001624 <fsm_tuning_run+0x480>
			counter++;
 8001492:	4b68      	ldr	r3, [pc, #416]	; (8001634 <fsm_tuning_run+0x490>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3301      	adds	r3, #1
 8001498:	4a66      	ldr	r2, [pc, #408]	; (8001634 <fsm_tuning_run+0x490>)
 800149a:	6013      	str	r3, [r2, #0]
			if(counter == max_red1){
 800149c:	4b65      	ldr	r3, [pc, #404]	; (8001634 <fsm_tuning_run+0x490>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b65      	ldr	r3, [pc, #404]	; (8001638 <fsm_tuning_run+0x494>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d102      	bne.n	80014ae <fsm_tuning_run+0x30a>
				counter = 1;
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <fsm_tuning_run+0x490>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 80014ae:	f000 fe9f 	bl	80021f0 <displayCounter>
		}
		break;
 80014b2:	e0b7      	b.n	8001624 <fsm_tuning_run+0x480>
	case TUNING_YELLOW1:
		if(timer1_flag){
 80014b4:	4b61      	ldr	r3, [pc, #388]	; (800163c <fsm_tuning_run+0x498>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d008      	beq.n	80014ce <fsm_tuning_run+0x32a>
			timer1_flag = 0;
 80014bc:	4b5f      	ldr	r3, [pc, #380]	; (800163c <fsm_tuning_run+0x498>)
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 80014c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014c6:	f000 fc4b 	bl	8001d60 <setTimer1>
			toggleTraffic1Yellow();
 80014ca:	f000 fdc5 	bl	8002058 <toggleTraffic1Yellow>
		}
		if(isButtonPressed(1)){
 80014ce:	2001      	movs	r0, #1
 80014d0:	f7ff fa32 	bl	8000938 <isButtonPressed>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d013      	beq.n	8001502 <fsm_tuning_run+0x35e>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status = AUTO_RED_GREEN;
 80014da:	4b59      	ldr	r3, [pc, #356]	; (8001640 <fsm_tuning_run+0x49c>)
 80014dc:	2202      	movs	r2, #2
 80014de:	601a      	str	r2, [r3, #0]
			acceptTraffic1Yellow();
 80014e0:	f000 fe52 	bl	8002188 <acceptTraffic1Yellow>
			setTimer1(1000);
 80014e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e8:	f000 fc3a 	bl	8001d60 <setTimer1>
			counter = max_red1;
 80014ec:	4b52      	ldr	r3, [pc, #328]	; (8001638 <fsm_tuning_run+0x494>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a50      	ldr	r2, [pc, #320]	; (8001634 <fsm_tuning_run+0x490>)
 80014f2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80014f4:	f000 fe7c 	bl	80021f0 <displayCounter>
			setTraffic1Red();
 80014f8:	f000 fcb8 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 80014fc:	f000 fd02 	bl	8001f04 <setTraffic2Green>
			break;
 8001500:	e095      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(2)){
 8001502:	2002      	movs	r0, #2
 8001504:	f7ff fa18 	bl	8000938 <isButtonPressed>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d013      	beq.n	8001536 <fsm_tuning_run+0x392>
			//isButtonPressed(3);
			status = TUNING_YELLOW2;
 800150e:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <fsm_tuning_run+0x49c>)
 8001510:	221a      	movs	r2, #26
 8001512:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 8001514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001518:	f000 fc22 	bl	8001d60 <setTimer1>
			acceptTraffic1Yellow();
 800151c:	f000 fe34 	bl	8002188 <acceptTraffic1Yellow>
			counter = max_yellow2;
 8001520:	4b48      	ldr	r3, [pc, #288]	; (8001644 <fsm_tuning_run+0x4a0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a43      	ldr	r2, [pc, #268]	; (8001634 <fsm_tuning_run+0x490>)
 8001526:	6013      	str	r3, [r2, #0]
			displayCounter();
 8001528:	f000 fe62 	bl	80021f0 <displayCounter>
			clearTraffic1();
 800152c:	f000 fcd6 	bl	8001edc <clearTraffic1>
			clearTraffic2();
 8001530:	f000 fd1c 	bl	8001f6c <clearTraffic2>
			break;
 8001534:	e07b      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(3)){
 8001536:	2003      	movs	r0, #3
 8001538:	f7ff f9fe 	bl	8000938 <isButtonPressed>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d072      	beq.n	8001628 <fsm_tuning_run+0x484>
			counter++;
 8001542:	4b3c      	ldr	r3, [pc, #240]	; (8001634 <fsm_tuning_run+0x490>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	4a3a      	ldr	r2, [pc, #232]	; (8001634 <fsm_tuning_run+0x490>)
 800154a:	6013      	str	r3, [r2, #0]
			if(counter == max_red2){
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <fsm_tuning_run+0x490>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b3d      	ldr	r3, [pc, #244]	; (8001648 <fsm_tuning_run+0x4a4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d102      	bne.n	800155e <fsm_tuning_run+0x3ba>
				counter = 1;
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <fsm_tuning_run+0x490>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800155e:	f000 fe47 	bl	80021f0 <displayCounter>
		}
		break;
 8001562:	e061      	b.n	8001628 <fsm_tuning_run+0x484>
	case TUNING_YELLOW2:
		if(timer1_flag){
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <fsm_tuning_run+0x498>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <fsm_tuning_run+0x3da>
			timer1_flag = 0;
 800156c:	4b33      	ldr	r3, [pc, #204]	; (800163c <fsm_tuning_run+0x498>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
			setTimer1(500);
 8001572:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001576:	f000 fbf3 	bl	8001d60 <setTimer1>
			toggleTraffic2Yellow();
 800157a:	f000 fd7f 	bl	800207c <toggleTraffic2Yellow>
		}

		if(isButtonPressed(1)){
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff f9da 	bl	8000938 <isButtonPressed>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d013      	beq.n	80015b2 <fsm_tuning_run+0x40e>
			//isButtonPressed(2);
			//isButtonPressed(3);
			status = AUTO_RED_GREEN;
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <fsm_tuning_run+0x49c>)
 800158c:	2202      	movs	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
			acceptTraffic2Yellow();
 8001590:	f000 fe14 	bl	80021bc <acceptTraffic2Yellow>
			setTimer1(1000);
 8001594:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001598:	f000 fbe2 	bl	8001d60 <setTimer1>
			counter = max_red1;
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <fsm_tuning_run+0x494>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a24      	ldr	r2, [pc, #144]	; (8001634 <fsm_tuning_run+0x490>)
 80015a2:	6013      	str	r3, [r2, #0]
			displayCounter();
 80015a4:	f000 fe24 	bl	80021f0 <displayCounter>
			setTraffic1Red();
 80015a8:	f000 fc60 	bl	8001e6c <setTraffic1Red>
			setTraffic2Green();
 80015ac:	f000 fcaa 	bl	8001f04 <setTraffic2Green>
			break;
 80015b0:	e03d      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(2)){
 80015b2:	2002      	movs	r0, #2
 80015b4:	f7ff f9c0 	bl	8000938 <isButtonPressed>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d013      	beq.n	80015e6 <fsm_tuning_run+0x442>
			//isButtonPressed(3);
			status = TUNING_RED1;
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <fsm_tuning_run+0x49c>)
 80015c0:	2215      	movs	r2, #21
 80015c2:	601a      	str	r2, [r3, #0]
			setTimer1(1000);
 80015c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015c8:	f000 fbca 	bl	8001d60 <setTimer1>
			acceptTraffic2Yellow();
 80015cc:	f000 fdf6 	bl	80021bc <acceptTraffic2Yellow>
			counter = max_red1;
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <fsm_tuning_run+0x494>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a17      	ldr	r2, [pc, #92]	; (8001634 <fsm_tuning_run+0x490>)
 80015d6:	6013      	str	r3, [r2, #0]
			displayCounter();
 80015d8:	f000 fe0a 	bl	80021f0 <displayCounter>
			clearTraffic1();
 80015dc:	f000 fc7e 	bl	8001edc <clearTraffic1>
			clearTraffic2();
 80015e0:	f000 fcc4 	bl	8001f6c <clearTraffic2>
			break;
 80015e4:	e023      	b.n	800162e <fsm_tuning_run+0x48a>
		}

		if(isButtonPressed(3)){
 80015e6:	2003      	movs	r0, #3
 80015e8:	f7ff f9a6 	bl	8000938 <isButtonPressed>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <fsm_tuning_run+0x488>
			counter++;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <fsm_tuning_run+0x490>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <fsm_tuning_run+0x490>)
 80015fa:	6013      	str	r3, [r2, #0]
			if(counter == max_red1){
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <fsm_tuning_run+0x490>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <fsm_tuning_run+0x494>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d102      	bne.n	800160e <fsm_tuning_run+0x46a>
				counter = 1;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <fsm_tuning_run+0x490>)
 800160a:	2201      	movs	r2, #1
 800160c:	601a      	str	r2, [r3, #0]
			}
			displayCounter();
 800160e:	f000 fdef 	bl	80021f0 <displayCounter>
		}
		break;
 8001612:	e00b      	b.n	800162c <fsm_tuning_run+0x488>
	default:
		break;
 8001614:	bf00      	nop
 8001616:	e00a      	b.n	800162e <fsm_tuning_run+0x48a>
		break;
 8001618:	bf00      	nop
 800161a:	e008      	b.n	800162e <fsm_tuning_run+0x48a>
		break;
 800161c:	bf00      	nop
 800161e:	e006      	b.n	800162e <fsm_tuning_run+0x48a>
		break;
 8001620:	bf00      	nop
 8001622:	e004      	b.n	800162e <fsm_tuning_run+0x48a>
		break;
 8001624:	bf00      	nop
 8001626:	e002      	b.n	800162e <fsm_tuning_run+0x48a>
		break;
 8001628:	bf00      	nop
 800162a:	e000      	b.n	800162e <fsm_tuning_run+0x48a>
		break;
 800162c:	bf00      	nop
	}
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000120 	.word	0x20000120
 8001638:	20000010 	.word	0x20000010
 800163c:	20000528 	.word	0x20000528
 8001640:	20000118 	.word	0x20000118
 8001644:	20000024 	.word	0x20000024
 8001648:	2000001c 	.word	0x2000001c

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001650:	f000 fe22 	bl	8002298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 f828 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f000 f954 	bl	8001904 <MX_GPIO_Init>
  MX_TIM2_Init();
 800165c:	f000 f866 	bl	800172c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001660:	f000 f926 	bl	80018b0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001664:	f000 f8ae 	bl	80017c4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8001668:	f000 f9bf 	bl	80019ea <SCH_Init>
//  SCH_Add_Task(test_IO, 10, 10);
  HAL_TIM_Base_Start_IT(&htim2);
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <main+0x4c>)
 800166e:	f001 fe69 	bl	8003344 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001672:	2100      	movs	r1, #0
 8001674:	4809      	ldr	r0, [pc, #36]	; (800169c <main+0x50>)
 8001676:	f001 ff0f 	bl	8003498 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <main+0x54>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
  pedestrianStatus = INIT;
 8001680:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <main+0x58>)
 8001682:	2201      	movs	r2, #1
 8001684:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_auto_run();
 8001686:	f7ff fa8d 	bl	8000ba4 <fsm_auto_run>
	  fsm_manual_run();
 800168a:	f7ff fb99 	bl	8000dc0 <fsm_manual_run>
	  fsm_tuning_run();
 800168e:	f7ff fd89 	bl	80011a4 <fsm_tuning_run>
	  fsm_pedestrian_run();
 8001692:	f7ff fcbf 	bl	8001014 <fsm_pedestrian_run>
	  fsm_auto_run();
 8001696:	e7f6      	b.n	8001686 <main+0x3a>
 8001698:	20000130 	.word	0x20000130
 800169c:	20000178 	.word	0x20000178
 80016a0:	20000118 	.word	0x20000118
 80016a4:	2000011c 	.word	0x2000011c

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	2228      	movs	r2, #40	; 0x28
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 f9bc 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ce:	2301      	movs	r3, #1
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016d2:	2310      	movs	r3, #16
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d6:	2302      	movs	r3, #2
 80016d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016da:	2300      	movs	r3, #0
 80016dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016de:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 f9c1 	bl	8002a70 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016f4:	f000 f974 	bl	80019e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fc:	2302      	movs	r3, #2
 80016fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2102      	movs	r1, #2
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fc2e 	bl	8002f74 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800171e:	f000 f95f 	bl	80019e0 <Error_Handler>
  }
}
 8001722:	bf00      	nop
 8001724:	3740      	adds	r7, #64	; 0x40
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001740:	463b      	mov	r3, r7
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_TIM2_Init+0x94>)
 800174a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001752:	f242 720f 	movw	r2, #9999	; 0x270f
 8001756:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_TIM2_Init+0x94>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001760:	223f      	movs	r2, #63	; 0x3f
 8001762:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_TIM2_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <MX_TIM2_Init+0x94>)
 8001772:	f001 fd97 	bl	80032a4 <HAL_TIM_Base_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800177c:	f000 f930 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	4619      	mov	r1, r3
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_TIM2_Init+0x94>)
 800178e:	f002 f8eb 	bl	8003968 <HAL_TIM_ConfigClockSource>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001798:	f000 f922 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_TIM2_Init+0x94>)
 80017aa:	f002 fc69 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017b4:	f000 f914 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000130 	.word	0x20000130

080017c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	f107 0320 	add.w	r3, r7, #32
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	615a      	str	r2, [r3, #20]
 80017f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f4:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <MX_TIM3_Init+0xe4>)
 80017f6:	4a2d      	ldr	r2, [pc, #180]	; (80018ac <MX_TIM3_Init+0xe8>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80017fa:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <MX_TIM3_Init+0xe4>)
 80017fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001802:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <MX_TIM3_Init+0xe4>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <MX_TIM3_Init+0xe4>)
 800180a:	223f      	movs	r2, #63	; 0x3f
 800180c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <MX_TIM3_Init+0xe4>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <MX_TIM3_Init+0xe4>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800181a:	4823      	ldr	r0, [pc, #140]	; (80018a8 <MX_TIM3_Init+0xe4>)
 800181c:	f001 fd42 	bl	80032a4 <HAL_TIM_Base_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001826:	f000 f8db 	bl	80019e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001834:	4619      	mov	r1, r3
 8001836:	481c      	ldr	r0, [pc, #112]	; (80018a8 <MX_TIM3_Init+0xe4>)
 8001838:	f002 f896 	bl	8003968 <HAL_TIM_ConfigClockSource>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001842:	f000 f8cd 	bl	80019e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <MX_TIM3_Init+0xe4>)
 8001848:	f001 fdce 	bl	80033e8 <HAL_TIM_PWM_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001852:	f000 f8c5 	bl	80019e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800185e:	f107 0320 	add.w	r3, r7, #32
 8001862:	4619      	mov	r1, r3
 8001864:	4810      	ldr	r0, [pc, #64]	; (80018a8 <MX_TIM3_Init+0xe4>)
 8001866:	f002 fc0b 	bl	8004080 <HAL_TIMEx_MasterConfigSynchronization>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001870:	f000 f8b6 	bl	80019e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001874:	2360      	movs	r3, #96	; 0x60
 8001876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2200      	movs	r2, #0
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <MX_TIM3_Init+0xe4>)
 800188c:	f001 ffae 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001896:	f000 f8a3 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MX_TIM3_Init+0xe4>)
 800189c:	f000 f964 	bl	8001b68 <HAL_TIM_MspPostInit>

}
 80018a0:	bf00      	nop
 80018a2:	3738      	adds	r7, #56	; 0x38
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000178 	.word	0x20000178
 80018ac:	40000400 	.word	0x40000400

080018b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_USART2_UART_Init+0x50>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018e8:	f002 fc3a 	bl	8004160 <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018f2:	f000 f875 	bl	80019e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001c0 	.word	0x200001c0
 8001900:	40004400 	.word	0x40004400

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <MX_GPIO_Init+0xd0>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	4a2d      	ldr	r2, [pc, #180]	; (80019d4 <MX_GPIO_Init+0xd0>)
 800191e:	f043 0304 	orr.w	r3, r3, #4
 8001922:	6193      	str	r3, [r2, #24]
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <MX_GPIO_Init+0xd0>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001930:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <MX_GPIO_Init+0xd0>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <MX_GPIO_Init+0xd0>)
 8001936:	f043 0308 	orr.w	r3, r3, #8
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <MX_GPIO_Init+0xd0>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001948:	2200      	movs	r2, #0
 800194a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800194e:	4822      	ldr	r0, [pc, #136]	; (80019d8 <MX_GPIO_Init+0xd4>)
 8001950:	f001 f85d 	bl	8002a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PedestrianLight_1_Pin|TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001954:	2200      	movs	r2, #0
 8001956:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 800195a:	4820      	ldr	r0, [pc, #128]	; (80019dc <MX_GPIO_Init+0xd8>)
 800195c:	f001 f857 	bl	8002a0e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedestrianButton_Pin Button1_Pin Button2_Pin */
  GPIO_InitStruct.Pin = PedestrianButton_Pin|Button1_Pin|Button2_Pin;
 8001960:	2313      	movs	r3, #19
 8001962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	4619      	mov	r1, r3
 8001972:	481a      	ldr	r0, [pc, #104]	; (80019dc <MX_GPIO_Init+0xd8>)
 8001974:	f000 feb0 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button3_Pin */
  GPIO_InitStruct.Pin = Button3_Pin;
 8001978:	2301      	movs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Button3_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4619      	mov	r1, r3
 800198a:	4813      	ldr	r0, [pc, #76]	; (80019d8 <MX_GPIO_Init+0xd4>)
 800198c:	f000 fea4 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_0_Pin TrafficLight1_1_Pin TrafficLight2_1_Pin TrafficLight2_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_0_Pin|TrafficLight1_1_Pin|TrafficLight2_1_Pin|TrafficLight2_0_Pin;
 8001990:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001994:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2302      	movs	r3, #2
 80019a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	4619      	mov	r1, r3
 80019a8:	480b      	ldr	r0, [pc, #44]	; (80019d8 <MX_GPIO_Init+0xd4>)
 80019aa:	f000 fe95 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PedestrianLight_1_Pin TrafficLight1_0_Pin */
  GPIO_InitStruct.Pin = PedestrianLight_1_Pin|TrafficLight1_0_Pin;
 80019ae:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80019b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2302      	movs	r3, #2
 80019be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c0:	f107 0308 	add.w	r3, r7, #8
 80019c4:	4619      	mov	r1, r3
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_GPIO_Init+0xd8>)
 80019c8:	f000 fe86 	bl	80026d8 <HAL_GPIO_Init>

}
 80019cc:	bf00      	nop
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010c00 	.word	0x40010c00
 80019dc:	40010800 	.word	0x40010800

080019e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e4:	b672      	cpsid	i
}
 80019e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <Error_Handler+0x8>

080019ea <SCH_Init>:

#include "scheduler.h"

sTask SCH_tasks_G[SCH_MAX_TASKS];

void SCH_Init(void){
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
	unsigned char i;
	for(i = 0; i < SCH_MAX_TASKS; i++){
 80019f0:	2300      	movs	r3, #0
 80019f2:	71fb      	strb	r3, [r7, #7]
 80019f4:	e006      	b.n	8001a04 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f80b 	bl	8001a14 <SCH_Delete_Task>
	for(i = 0; i < SCH_MAX_TASKS; i++){
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	3301      	adds	r3, #1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	2b27      	cmp	r3, #39	; 0x27
 8001a08:	d9f5      	bls.n	80019f6 <SCH_Init+0xc>
	}
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <SCH_Delete_Task>:
		}
	}
	SCH_Go_To_Sleep();
}

uint8_t SCH_Delete_Task(uint32_t index){
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	if(SCH_tasks_G[index].pTask == 0){
 8001a1c:	491c      	ldr	r1, [pc, #112]	; (8001a90 <SCH_Delete_Task+0x7c>)
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <SCH_Delete_Task+0x20>
		return 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e027      	b.n	8001a84 <SCH_Delete_Task+0x70>
	} else {
		SCH_tasks_G[index].pTask = 0;
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <SCH_Delete_Task+0x7c>)
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Delay = 0;
 8001a46:	4912      	ldr	r1, [pc, #72]	; (8001a90 <SCH_Delete_Task+0x7c>)
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3304      	adds	r3, #4
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].Period = 0;
 8001a5a:	490d      	ldr	r1, [pc, #52]	; (8001a90 <SCH_Delete_Task+0x7c>)
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	440b      	add	r3, r1
 8001a68:	3308      	adds	r3, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[index].RunMe = 0;
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <SCH_Delete_Task+0x7c>)
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	330c      	adds	r3, #12
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
		return 1;
 8001a82:	2301      	movs	r3, #1
	}
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000204 	.word	0x20000204

08001a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <HAL_MspInit+0x5c>)
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <HAL_MspInit+0x5c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6193      	str	r3, [r2, #24]
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_MspInit+0x5c>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x5c>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x5c>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x5c>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_MspInit+0x60>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <HAL_MspInit+0x60>)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40010000 	.word	0x40010000

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b08:	d114      	bne.n	8001b34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <HAL_TIM_Base_MspInit+0x68>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	4a14      	ldr	r2, [pc, #80]	; (8001b60 <HAL_TIM_Base_MspInit+0x68>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	61d3      	str	r3, [r2, #28]
 8001b16:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <HAL_TIM_Base_MspInit+0x68>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	201c      	movs	r0, #28
 8001b28:	f000 fcef 	bl	800250a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b2c:	201c      	movs	r0, #28
 8001b2e:	f000 fd08 	bl	8002542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b32:	e010      	b.n	8001b56 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_TIM_Base_MspInit+0x6c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d10b      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_TIM_Base_MspInit+0x68>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_TIM_Base_MspInit+0x68>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_TIM_Base_MspInit+0x68>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40000400 	.word	0x40000400

08001b68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <HAL_TIM_MspPostInit+0x58>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d117      	bne.n	8001bb8 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_TIM_MspPostInit+0x5c>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_TIM_MspPostInit+0x5c>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_TIM_MspPostInit+0x5c>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 0310 	add.w	r3, r7, #16
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_TIM_MspPostInit+0x60>)
 8001bb4:	f000 fd90 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010800 	.word	0x40010800

08001bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 0310 	add.w	r3, r7, #16
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_UART_MspInit+0x98>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d137      	bne.n	8001c5c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_UART_MspInit+0x9c>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	4a1d      	ldr	r2, [pc, #116]	; (8001c68 <HAL_UART_MspInit+0x9c>)
 8001bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf6:	61d3      	str	r3, [r2, #28]
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_UART_MspInit+0x9c>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_UART_MspInit+0x9c>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a17      	ldr	r2, [pc, #92]	; (8001c68 <HAL_UART_MspInit+0x9c>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <HAL_UART_MspInit+0x9c>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480f      	ldr	r0, [pc, #60]	; (8001c6c <HAL_UART_MspInit+0xa0>)
 8001c30:	f000 fd52 	bl	80026d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c34:	2308      	movs	r3, #8
 8001c36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	4809      	ldr	r0, [pc, #36]	; (8001c6c <HAL_UART_MspInit+0xa0>)
 8001c48:	f000 fd46 	bl	80026d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2026      	movs	r0, #38	; 0x26
 8001c52:	f000 fc5a 	bl	800250a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c56:	2026      	movs	r0, #38	; 0x26
 8001c58:	f000 fc73 	bl	8002542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3720      	adds	r7, #32
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40004400 	.word	0x40004400
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010800 	.word	0x40010800

08001c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c74:	e7fe      	b.n	8001c74 <NMI_Handler+0x4>

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr

08001c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr

08001cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb6:	f000 fb35 	bl	8002324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM2_IRQHandler+0x10>)
 8001cc6:	f001 fc89 	bl	80035dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000130 	.word	0x20000130

08001cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cd8:	4802      	ldr	r0, [pc, #8]	; (8001ce4 <USART2_IRQHandler+0x10>)
 8001cda:	f002 fad3 	bl	8004284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200001c0 	.word	0x200001c0

08001ce8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf0:	4a14      	ldr	r2, [pc, #80]	; (8001d44 <_sbrk+0x5c>)
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <_sbrk+0x60>)
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cfc:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d102      	bne.n	8001d0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <_sbrk+0x64>)
 8001d06:	4a12      	ldr	r2, [pc, #72]	; (8001d50 <_sbrk+0x68>)
 8001d08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d207      	bcs.n	8001d28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d18:	f002 fe62 	bl	80049e0 <__errno>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	220c      	movs	r2, #12
 8001d20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295
 8001d26:	e009      	b.n	8001d3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <_sbrk+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <_sbrk+0x64>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a05      	ldr	r2, [pc, #20]	; (8001d4c <_sbrk+0x64>)
 8001d38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20005000 	.word	0x20005000
 8001d48:	00000400 	.word	0x00000400
 8001d4c:	20000524 	.word	0x20000524
 8001d50:	20000558 	.word	0x20000558

08001d54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <setTimer1>:
#include "timer.h"

int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;

void setTimer1(int duration){
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a08      	ldr	r2, [pc, #32]	; (8001d8c <setTimer1+0x2c>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1092      	asrs	r2, r2, #2
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a06      	ldr	r2, [pc, #24]	; (8001d90 <setTimer1+0x30>)
 8001d78:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <setTimer1+0x34>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	66666667 	.word	0x66666667
 8001d90:	20000534 	.word	0x20000534
 8001d94:	20000528 	.word	0x20000528

08001d98 <setTimer2>:

void setTimer2(int duration){
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <setTimer2+0x2c>)
 8001da4:	fb82 1203 	smull	r1, r2, r2, r3
 8001da8:	1092      	asrs	r2, r2, #2
 8001daa:	17db      	asrs	r3, r3, #31
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a06      	ldr	r2, [pc, #24]	; (8001dc8 <setTimer2+0x30>)
 8001db0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <setTimer2+0x34>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	66666667 	.word	0x66666667
 8001dc8:	20000538 	.word	0x20000538
 8001dcc:	2000052c 	.word	0x2000052c

08001dd0 <timer_run>:
void setTimer3(int duration){
	timer3_counter = duration/TIMER_CYCLE;
	timer3_flag = 0;
}

void timer_run(){
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <timer_run+0x6c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dd0b      	ble.n	8001df4 <timer_run+0x24>
		timer1_counter--;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <timer_run+0x6c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	4a16      	ldr	r2, [pc, #88]	; (8001e3c <timer_run+0x6c>)
 8001de4:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0) timer1_flag = 1;
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <timer_run+0x6c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d102      	bne.n	8001df4 <timer_run+0x24>
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <timer_run+0x70>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
	}
	if(timer2_counter > 0){
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <timer_run+0x74>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	dd0b      	ble.n	8001e14 <timer_run+0x44>
		timer2_counter--;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <timer_run+0x74>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <timer_run+0x74>)
 8001e04:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0) timer2_flag = 1;
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <timer_run+0x74>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <timer_run+0x44>
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <timer_run+0x78>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
	}
	if(timer3_counter > 0){
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <timer_run+0x7c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	dd0b      	ble.n	8001e34 <timer_run+0x64>
		timer3_counter--;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <timer_run+0x7c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <timer_run+0x7c>)
 8001e24:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0) timer3_flag = 1;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <timer_run+0x7c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d102      	bne.n	8001e34 <timer_run+0x64>
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <timer_run+0x80>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
	}
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	20000534 	.word	0x20000534
 8001e40:	20000528 	.word	0x20000528
 8001e44:	20000538 	.word	0x20000538
 8001e48:	2000052c 	.word	0x2000052c
 8001e4c:	2000053c 	.word	0x2000053c
 8001e50:	20000530 	.word	0x20000530

08001e54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	timer_run();
 8001e5c:	f7ff ffb8 	bl	8001dd0 <timer_run>
	button_reading();
 8001e60:	f7fe fd9a 	bl	8000998 <button_reading>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <setTraffic1Red>:

#include "traffic.h"

void setTraffic1Red(){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <setTraffic1Red+0x20>)
 8001e78:	f000 fdc9 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2108      	movs	r1, #8
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <setTraffic1Red+0x24>)
 8001e82:	f000 fdc4 	bl	8002a0e <HAL_GPIO_WritePin>

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40010800 	.word	0x40010800
 8001e90:	40010c00 	.word	0x40010c00

08001e94 <setTraffic2Red>:

void setTraffic2Red(){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2120      	movs	r1, #32
 8001e9c:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <setTraffic2Red+0x1c>)
 8001e9e:	f000 fdb6 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <setTraffic2Red+0x1c>)
 8001ea8:	f000 fdb1 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40010c00 	.word	0x40010c00

08001eb4 <setTraffic1Green>:

void setTraffic1Green(){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <setTraffic1Green+0x20>)
 8001ec0:	f000 fda5 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <setTraffic1Green+0x24>)
 8001eca:	f000 fda0 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40010800 	.word	0x40010800
 8001ed8:	40010c00 	.word	0x40010c00

08001edc <clearTraffic1>:

void clearTraffic1(){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_RESET);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <clearTraffic1+0x20>)
 8001ee8:	f000 fd91 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_RESET);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2108      	movs	r1, #8
 8001ef0:	4803      	ldr	r0, [pc, #12]	; (8001f00 <clearTraffic1+0x24>)
 8001ef2:	f000 fd8c 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40010800 	.word	0x40010800
 8001f00:	40010c00 	.word	0x40010c00

08001f04 <setTraffic2Green>:


void setTraffic2Green(){
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2120      	movs	r1, #32
 8001f0c:	4804      	ldr	r0, [pc, #16]	; (8001f20 <setTraffic2Green+0x1c>)
 8001f0e:	f000 fd7e 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	2110      	movs	r1, #16
 8001f16:	4802      	ldr	r0, [pc, #8]	; (8001f20 <setTraffic2Green+0x1c>)
 8001f18:	f000 fd79 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40010c00 	.word	0x40010c00

08001f24 <setTraffic1Yellow>:

void setTraffic1Yellow(){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin, GPIO_PIN_SET);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2e:	4805      	ldr	r0, [pc, #20]	; (8001f44 <setTraffic1Yellow+0x20>)
 8001f30:	f000 fd6d 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin, GPIO_PIN_SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2108      	movs	r1, #8
 8001f38:	4803      	ldr	r0, [pc, #12]	; (8001f48 <setTraffic1Yellow+0x24>)
 8001f3a:	f000 fd68 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40010800 	.word	0x40010800
 8001f48:	40010c00 	.word	0x40010c00

08001f4c <setTraffic2Yellow>:

void setTraffic2Yellow(){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_SET);
 8001f50:	2201      	movs	r2, #1
 8001f52:	2120      	movs	r1, #32
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <setTraffic2Yellow+0x1c>)
 8001f56:	f000 fd5a 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_SET);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2110      	movs	r1, #16
 8001f5e:	4802      	ldr	r0, [pc, #8]	; (8001f68 <setTraffic2Yellow+0x1c>)
 8001f60:	f000 fd55 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010c00 	.word	0x40010c00

08001f6c <clearTraffic2>:

void clearTraffic2(){
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin, GPIO_PIN_RESET);
 8001f70:	2200      	movs	r2, #0
 8001f72:	2120      	movs	r1, #32
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <clearTraffic2+0x1c>)
 8001f76:	f000 fd4a 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2110      	movs	r1, #16
 8001f7e:	4802      	ldr	r0, [pc, #8]	; (8001f88 <clearTraffic2+0x1c>)
 8001f80:	f000 fd45 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40010c00 	.word	0x40010c00

08001f8c <setPedestrianRed>:

void setPedestrianRed(){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <setPedestrianRed+0x20>)
 8001f98:	f000 fd39 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <setPedestrianRed+0x24>)
 8001fa4:	f000 fd33 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40010c00 	.word	0x40010c00
 8001fb0:	40010800 	.word	0x40010800

08001fb4 <setPedestrianGreen>:

void setPedestrianGreen(){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <setPedestrianGreen+0x20>)
 8001fc0:	f000 fd25 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <setPedestrianGreen+0x24>)
 8001fcc:	f000 fd1f 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40010800 	.word	0x40010800

08001fdc <clearPedestrian>:
void setPedestrianYellow(){
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_SET);
}

void clearPedestrian(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PedestrianLight_0_GPIO_Port, PedestrianLight_0_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe6:	4805      	ldr	r0, [pc, #20]	; (8001ffc <clearPedestrian+0x20>)
 8001fe8:	f000 fd11 	bl	8002a0e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PedestrianLight_1_GPIO_Port, PedestrianLight_1_Pin, GPIO_PIN_RESET);
 8001fec:	2200      	movs	r2, #0
 8001fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff2:	4803      	ldr	r0, [pc, #12]	; (8002000 <clearPedestrian+0x24>)
 8001ff4:	f000 fd0b 	bl	8002a0e <HAL_GPIO_WritePin>
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40010c00 	.word	0x40010c00
 8002000:	40010800 	.word	0x40010800

08002004 <toggleTraffic1Red>:

void toggleTraffic1Red(){
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 8002008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <toggleTraffic1Red+0x14>)
 800200e:	f000 fd16 	bl	8002a3e <HAL_GPIO_TogglePin>
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40010800 	.word	0x40010800

0800201c <toggleTraffic2Red>:

void toggleTraffic2Red(){
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
	// Only use when led is clear or red.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8002020:	2120      	movs	r1, #32
 8002022:	4802      	ldr	r0, [pc, #8]	; (800202c <toggleTraffic2Red+0x10>)
 8002024:	f000 fd0b 	bl	8002a3e <HAL_GPIO_TogglePin>
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40010c00 	.word	0x40010c00

08002030 <toggleTraffic1Green>:

void toggleTraffic1Green(){
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8002034:	2108      	movs	r1, #8
 8002036:	4802      	ldr	r0, [pc, #8]	; (8002040 <toggleTraffic1Green+0x10>)
 8002038:	f000 fd01 	bl	8002a3e <HAL_GPIO_TogglePin>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40010c00 	.word	0x40010c00

08002044 <toggleTraffic2Green>:

void toggleTraffic2Green(){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	// Only use when led is clear or green.
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8002048:	2110      	movs	r1, #16
 800204a:	4802      	ldr	r0, [pc, #8]	; (8002054 <toggleTraffic2Green+0x10>)
 800204c:	f000 fcf7 	bl	8002a3e <HAL_GPIO_TogglePin>
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40010c00 	.word	0x40010c00

08002058 <toggleTraffic1Yellow>:

void toggleTraffic1Yellow(){
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight1_0_GPIO_Port, TrafficLight1_0_Pin);
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4804      	ldr	r0, [pc, #16]	; (8002074 <toggleTraffic1Yellow+0x1c>)
 8002062:	f000 fcec 	bl	8002a3e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight1_1_GPIO_Port, TrafficLight1_1_Pin);
 8002066:	2108      	movs	r1, #8
 8002068:	4803      	ldr	r0, [pc, #12]	; (8002078 <toggleTraffic1Yellow+0x20>)
 800206a:	f000 fce8 	bl	8002a3e <HAL_GPIO_TogglePin>
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40010800 	.word	0x40010800
 8002078:	40010c00 	.word	0x40010c00

0800207c <toggleTraffic2Yellow>:

void toggleTraffic2Yellow(){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	// Only use when led is clear or yellow.
	HAL_GPIO_TogglePin(TrafficLight2_0_GPIO_Port, TrafficLight2_0_Pin);
 8002080:	2120      	movs	r1, #32
 8002082:	4804      	ldr	r0, [pc, #16]	; (8002094 <toggleTraffic2Yellow+0x18>)
 8002084:	f000 fcdb 	bl	8002a3e <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(TrafficLight2_1_GPIO_Port, TrafficLight2_1_Pin);
 8002088:	2110      	movs	r1, #16
 800208a:	4802      	ldr	r0, [pc, #8]	; (8002094 <toggleTraffic2Yellow+0x18>)
 800208c:	f000 fcd7 	bl	8002a3e <HAL_GPIO_TogglePin>
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010c00 	.word	0x40010c00

08002098 <acceptTraffic1Red>:

void acceptTraffic1Red(){
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
	max_red1 = counter;
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <acceptTraffic1Red+0x34>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0b      	ldr	r2, [pc, #44]	; (80020d0 <acceptTraffic1Red+0x38>)
 80020a2:	6013      	str	r3, [r2, #0]
	if(max_red1 <= max_yellow2) max_yellow2 = 1;
 80020a4:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <acceptTraffic1Red+0x38>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <acceptTraffic1Red+0x3c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	dc02      	bgt.n	80020b6 <acceptTraffic1Red+0x1e>
 80020b0:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <acceptTraffic1Red+0x3c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
	max_green2 = max_red1 - max_yellow2;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <acceptTraffic1Red+0x38>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <acceptTraffic1Red+0x3c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <acceptTraffic1Red+0x40>)
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000120 	.word	0x20000120
 80020d0:	20000010 	.word	0x20000010
 80020d4:	20000024 	.word	0x20000024
 80020d8:	20000020 	.word	0x20000020

080020dc <acceptTraffic2Red>:

void acceptTraffic2Red(){
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
	max_red2 = counter;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <acceptTraffic2Red+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0b      	ldr	r2, [pc, #44]	; (8002114 <acceptTraffic2Red+0x38>)
 80020e6:	6013      	str	r3, [r2, #0]
	if(max_red2 <= max_yellow1) max_yellow1 = 1;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <acceptTraffic2Red+0x38>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <acceptTraffic2Red+0x3c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dc02      	bgt.n	80020fa <acceptTraffic2Red+0x1e>
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <acceptTraffic2Red+0x3c>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
	max_green1 = max_red2 - max_yellow1;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <acceptTraffic2Red+0x38>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <acceptTraffic2Red+0x3c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a05      	ldr	r2, [pc, #20]	; (800211c <acceptTraffic2Red+0x40>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000120 	.word	0x20000120
 8002114:	2000001c 	.word	0x2000001c
 8002118:	20000018 	.word	0x20000018
 800211c:	20000014 	.word	0x20000014

08002120 <acceptTraffic1Green>:

void acceptTraffic1Green(){
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	max_green1 = counter;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <acceptTraffic1Green+0x24>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <acceptTraffic1Green+0x28>)
 800212a:	6013      	str	r3, [r2, #0]
	max_yellow1 = max_red2 - max_green1;
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <acceptTraffic1Green+0x2c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <acceptTraffic1Green+0x28>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	4a06      	ldr	r2, [pc, #24]	; (8002150 <acceptTraffic1Green+0x30>)
 8002138:	6013      	str	r3, [r2, #0]
}
 800213a:	bf00      	nop
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000120 	.word	0x20000120
 8002148:	20000014 	.word	0x20000014
 800214c:	2000001c 	.word	0x2000001c
 8002150:	20000018 	.word	0x20000018

08002154 <acceptTraffic2Green>:

void acceptTraffic2Green(){
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
	max_green2 = counter;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <acceptTraffic2Green+0x24>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a07      	ldr	r2, [pc, #28]	; (800217c <acceptTraffic2Green+0x28>)
 800215e:	6013      	str	r3, [r2, #0]
	max_yellow2 = max_red1 - max_green2;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <acceptTraffic2Green+0x2c>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <acceptTraffic2Green+0x28>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	4a06      	ldr	r2, [pc, #24]	; (8002184 <acceptTraffic2Green+0x30>)
 800216c:	6013      	str	r3, [r2, #0]
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000120 	.word	0x20000120
 800217c:	20000020 	.word	0x20000020
 8002180:	20000010 	.word	0x20000010
 8002184:	20000024 	.word	0x20000024

08002188 <acceptTraffic1Yellow>:

void acceptTraffic1Yellow(){
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
	max_yellow1 = counter;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <acceptTraffic1Yellow+0x24>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a07      	ldr	r2, [pc, #28]	; (80021b0 <acceptTraffic1Yellow+0x28>)
 8002192:	6013      	str	r3, [r2, #0]
	max_green1 = max_red2 - max_yellow1;
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <acceptTraffic1Yellow+0x2c>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <acceptTraffic1Yellow+0x28>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <acceptTraffic1Yellow+0x30>)
 80021a0:	6013      	str	r3, [r2, #0]
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	20000120 	.word	0x20000120
 80021b0:	20000018 	.word	0x20000018
 80021b4:	2000001c 	.word	0x2000001c
 80021b8:	20000014 	.word	0x20000014

080021bc <acceptTraffic2Yellow>:

void acceptTraffic2Yellow(){
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
	max_yellow2 = counter;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <acceptTraffic2Yellow+0x24>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <acceptTraffic2Yellow+0x28>)
 80021c6:	6013      	str	r3, [r2, #0]
	max_green2 = max_red1 - max_yellow2;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <acceptTraffic2Yellow+0x2c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <acceptTraffic2Yellow+0x28>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	4a06      	ldr	r2, [pc, #24]	; (80021ec <acceptTraffic2Yellow+0x30>)
 80021d4:	6013      	str	r3, [r2, #0]
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000120 	.word	0x20000120
 80021e4:	20000024 	.word	0x20000024
 80021e8:	20000010 	.word	0x20000010
 80021ec:	20000020 	.word	0x20000020

080021f0 <displayCounter>:

void displayCounter(){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
	sprintf(str, "!7SEG:%d%d#\r\n", counter/10, counter%10);
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <displayCounter+0x48>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a10      	ldr	r2, [pc, #64]	; (800223c <displayCounter+0x4c>)
 80021fa:	fb82 1203 	smull	r1, r2, r2, r3
 80021fe:	1092      	asrs	r2, r2, #2
 8002200:	17db      	asrs	r3, r3, #31
 8002202:	1ad0      	subs	r0, r2, r3
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <displayCounter+0x48>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <displayCounter+0x4c>)
 800220a:	fb83 1302 	smull	r1, r3, r3, r2
 800220e:	1099      	asrs	r1, r3, #2
 8002210:	17d3      	asrs	r3, r2, #31
 8002212:	1ac9      	subs	r1, r1, r3
 8002214:	460b      	mov	r3, r1
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	1ad1      	subs	r1, r2, r3
 800221e:	460b      	mov	r3, r1
 8002220:	4602      	mov	r2, r0
 8002222:	4907      	ldr	r1, [pc, #28]	; (8002240 <displayCounter+0x50>)
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <displayCounter+0x54>)
 8002226:	f002 fc0d 	bl	8004a44 <siprintf>
	HAL_UART_Transmit_IT(&huart2, (void*)str, 15);
 800222a:	220f      	movs	r2, #15
 800222c:	4905      	ldr	r1, [pc, #20]	; (8002244 <displayCounter+0x54>)
 800222e:	4806      	ldr	r0, [pc, #24]	; (8002248 <displayCounter+0x58>)
 8002230:	f001 ffe3 	bl	80041fa <HAL_UART_Transmit_IT>
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000120 	.word	0x20000120
 800223c:	66666667 	.word	0x66666667
 8002240:	08005350 	.word	0x08005350
 8002244:	20000124 	.word	0x20000124
 8002248:	200001c0 	.word	0x200001c0

0800224c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480c      	ldr	r0, [pc, #48]	; (8002280 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800224e:	490d      	ldr	r1, [pc, #52]	; (8002284 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002250:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002264:	4c0a      	ldr	r4, [pc, #40]	; (8002290 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002272:	f7ff fd6f 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002276:	f002 fbb9 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800227a:	f7ff f9e7 	bl	800164c <main>
  bx lr
 800227e:	4770      	bx	lr
  ldr r0, =_sdata
 8002280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002284:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002288:	080053c4 	.word	0x080053c4
  ldr r2, =_sbss
 800228c:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002290:	20000554 	.word	0x20000554

08002294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002294:	e7fe      	b.n	8002294 <ADC1_2_IRQHandler>
	...

08002298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_Init+0x28>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_Init+0x28>)
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a8:	2003      	movs	r0, #3
 80022aa:	f000 f923 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ae:	200f      	movs	r0, #15
 80022b0:	f000 f808 	bl	80022c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b4:	f7ff fbee 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40022000 	.word	0x40022000

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_InitTick+0x54>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <HAL_InitTick+0x58>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	4619      	mov	r1, r3
 80022d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f93b 	bl	800255e <HAL_SYSTICK_Config>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00e      	b.n	8002310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b0f      	cmp	r3, #15
 80022f6:	d80a      	bhi.n	800230e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f8:	2200      	movs	r2, #0
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f000 f903 	bl	800250a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002304:	4a06      	ldr	r2, [pc, #24]	; (8002320 <HAL_InitTick+0x5c>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000028 	.word	0x20000028
 800231c:	20000030 	.word	0x20000030
 8002320:	2000002c 	.word	0x2000002c

08002324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_IncTick+0x1c>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_IncTick+0x20>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4413      	add	r3, r2
 8002334:	4a03      	ldr	r2, [pc, #12]	; (8002344 <HAL_IncTick+0x20>)
 8002336:	6013      	str	r3, [r2, #0]
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr
 8002340:	20000030 	.word	0x20000030
 8002344:	20000540 	.word	0x20000540

08002348 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b02      	ldr	r3, [pc, #8]	; (8002358 <HAL_GetTick+0x10>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000540 	.word	0x20000540

0800235c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002378:	4013      	ands	r3, r2
 800237a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800238e:	4a04      	ldr	r2, [pc, #16]	; (80023a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60d3      	str	r3, [r2, #12]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <__NVIC_GetPriorityGrouping+0x18>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	f003 0307 	and.w	r3, r3, #7
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	db0b      	blt.n	80023ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4906      	ldr	r1, [pc, #24]	; (80023f4 <__NVIC_EnableIRQ+0x34>)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	2001      	movs	r0, #1
 80023e2:	fa00 f202 	lsl.w	r2, r0, r2
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	e000e100 	.word	0xe000e100

080023f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	6039      	str	r1, [r7, #0]
 8002402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	2b00      	cmp	r3, #0
 800240a:	db0a      	blt.n	8002422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	; (8002444 <__NVIC_SetPriority+0x4c>)
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	440b      	add	r3, r1
 800241c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002420:	e00a      	b.n	8002438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4908      	ldr	r1, [pc, #32]	; (8002448 <__NVIC_SetPriority+0x50>)
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	3b04      	subs	r3, #4
 8002430:	0112      	lsls	r2, r2, #4
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	440b      	add	r3, r1
 8002436:	761a      	strb	r2, [r3, #24]
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000e100 	.word	0xe000e100
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f1c3 0307 	rsb	r3, r3, #7
 8002466:	2b04      	cmp	r3, #4
 8002468:	bf28      	it	cs
 800246a:	2304      	movcs	r3, #4
 800246c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3304      	adds	r3, #4
 8002472:	2b06      	cmp	r3, #6
 8002474:	d902      	bls.n	800247c <NVIC_EncodePriority+0x30>
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3b03      	subs	r3, #3
 800247a:	e000      	b.n	800247e <NVIC_EncodePriority+0x32>
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	f04f 32ff 	mov.w	r2, #4294967295
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	401a      	ands	r2, r3
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002494:	f04f 31ff 	mov.w	r1, #4294967295
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	43d9      	mvns	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	4313      	orrs	r3, r2
         );
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3724      	adds	r7, #36	; 0x24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c0:	d301      	bcc.n	80024c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <SysTick_Config+0x40>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ce:	210f      	movs	r1, #15
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f7ff ff90 	bl	80023f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <SysTick_Config+0x40>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <SysTick_Config+0x40>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff2d 	bl	800235c <__NVIC_SetPriorityGrouping>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff42 	bl	80023a4 <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff90 	bl	800244c <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5f 	bl	80023f8 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff35 	bl	80023c0 <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffa2 	bl	80024b0 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002588:	2b02      	cmp	r3, #2
 800258a:	d008      	beq.n	800259e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2204      	movs	r2, #4
 8002590:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e020      	b.n	80025e0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 020e 	bic.w	r2, r2, #14
 80025ac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f202 	lsl.w	r2, r1, r2
 80025cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025de:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d005      	beq.n	800260e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2204      	movs	r2, #4
 8002606:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e051      	b.n	80026b2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 020e 	bic.w	r2, r2, #14
 800261c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 0201 	bic.w	r2, r2, #1
 800262c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a22      	ldr	r2, [pc, #136]	; (80026bc <HAL_DMA_Abort_IT+0xd0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d029      	beq.n	800268c <HAL_DMA_Abort_IT+0xa0>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <HAL_DMA_Abort_IT+0xd4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Abort_IT+0x9c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <HAL_DMA_Abort_IT+0xd8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01a      	beq.n	8002682 <HAL_DMA_Abort_IT+0x96>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_DMA_Abort_IT+0xdc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d012      	beq.n	800267c <HAL_DMA_Abort_IT+0x90>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1c      	ldr	r2, [pc, #112]	; (80026cc <HAL_DMA_Abort_IT+0xe0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00a      	beq.n	8002676 <HAL_DMA_Abort_IT+0x8a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <HAL_DMA_Abort_IT+0xe4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d102      	bne.n	8002670 <HAL_DMA_Abort_IT+0x84>
 800266a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800266e:	e00e      	b.n	800268e <HAL_DMA_Abort_IT+0xa2>
 8002670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002674:	e00b      	b.n	800268e <HAL_DMA_Abort_IT+0xa2>
 8002676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267a:	e008      	b.n	800268e <HAL_DMA_Abort_IT+0xa2>
 800267c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002680:	e005      	b.n	800268e <HAL_DMA_Abort_IT+0xa2>
 8002682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002686:	e002      	b.n	800268e <HAL_DMA_Abort_IT+0xa2>
 8002688:	2310      	movs	r3, #16
 800268a:	e000      	b.n	800268e <HAL_DMA_Abort_IT+0xa2>
 800268c:	2301      	movs	r3, #1
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_DMA_Abort_IT+0xe8>)
 8002690:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
    } 
  }
  return status;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40020008 	.word	0x40020008
 80026c0:	4002001c 	.word	0x4002001c
 80026c4:	40020030 	.word	0x40020030
 80026c8:	40020044 	.word	0x40020044
 80026cc:	40020058 	.word	0x40020058
 80026d0:	4002006c 	.word	0x4002006c
 80026d4:	40020000 	.word	0x40020000

080026d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026d8:	b480      	push	{r7}
 80026da:	b08b      	sub	sp, #44	; 0x2c
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ea:	e169      	b.n	80029c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026ec:	2201      	movs	r2, #1
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69fa      	ldr	r2, [r7, #28]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	429a      	cmp	r2, r3
 8002706:	f040 8158 	bne.w	80029ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4a9a      	ldr	r2, [pc, #616]	; (8002978 <HAL_GPIO_Init+0x2a0>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d05e      	beq.n	80027d2 <HAL_GPIO_Init+0xfa>
 8002714:	4a98      	ldr	r2, [pc, #608]	; (8002978 <HAL_GPIO_Init+0x2a0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d875      	bhi.n	8002806 <HAL_GPIO_Init+0x12e>
 800271a:	4a98      	ldr	r2, [pc, #608]	; (800297c <HAL_GPIO_Init+0x2a4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d058      	beq.n	80027d2 <HAL_GPIO_Init+0xfa>
 8002720:	4a96      	ldr	r2, [pc, #600]	; (800297c <HAL_GPIO_Init+0x2a4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d86f      	bhi.n	8002806 <HAL_GPIO_Init+0x12e>
 8002726:	4a96      	ldr	r2, [pc, #600]	; (8002980 <HAL_GPIO_Init+0x2a8>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d052      	beq.n	80027d2 <HAL_GPIO_Init+0xfa>
 800272c:	4a94      	ldr	r2, [pc, #592]	; (8002980 <HAL_GPIO_Init+0x2a8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d869      	bhi.n	8002806 <HAL_GPIO_Init+0x12e>
 8002732:	4a94      	ldr	r2, [pc, #592]	; (8002984 <HAL_GPIO_Init+0x2ac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d04c      	beq.n	80027d2 <HAL_GPIO_Init+0xfa>
 8002738:	4a92      	ldr	r2, [pc, #584]	; (8002984 <HAL_GPIO_Init+0x2ac>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d863      	bhi.n	8002806 <HAL_GPIO_Init+0x12e>
 800273e:	4a92      	ldr	r2, [pc, #584]	; (8002988 <HAL_GPIO_Init+0x2b0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d046      	beq.n	80027d2 <HAL_GPIO_Init+0xfa>
 8002744:	4a90      	ldr	r2, [pc, #576]	; (8002988 <HAL_GPIO_Init+0x2b0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d85d      	bhi.n	8002806 <HAL_GPIO_Init+0x12e>
 800274a:	2b12      	cmp	r3, #18
 800274c:	d82a      	bhi.n	80027a4 <HAL_GPIO_Init+0xcc>
 800274e:	2b12      	cmp	r3, #18
 8002750:	d859      	bhi.n	8002806 <HAL_GPIO_Init+0x12e>
 8002752:	a201      	add	r2, pc, #4	; (adr r2, 8002758 <HAL_GPIO_Init+0x80>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	080027d3 	.word	0x080027d3
 800275c:	080027ad 	.word	0x080027ad
 8002760:	080027bf 	.word	0x080027bf
 8002764:	08002801 	.word	0x08002801
 8002768:	08002807 	.word	0x08002807
 800276c:	08002807 	.word	0x08002807
 8002770:	08002807 	.word	0x08002807
 8002774:	08002807 	.word	0x08002807
 8002778:	08002807 	.word	0x08002807
 800277c:	08002807 	.word	0x08002807
 8002780:	08002807 	.word	0x08002807
 8002784:	08002807 	.word	0x08002807
 8002788:	08002807 	.word	0x08002807
 800278c:	08002807 	.word	0x08002807
 8002790:	08002807 	.word	0x08002807
 8002794:	08002807 	.word	0x08002807
 8002798:	08002807 	.word	0x08002807
 800279c:	080027b5 	.word	0x080027b5
 80027a0:	080027c9 	.word	0x080027c9
 80027a4:	4a79      	ldr	r2, [pc, #484]	; (800298c <HAL_GPIO_Init+0x2b4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027aa:	e02c      	b.n	8002806 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	623b      	str	r3, [r7, #32]
          break;
 80027b2:	e029      	b.n	8002808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	3304      	adds	r3, #4
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e024      	b.n	8002808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	3308      	adds	r3, #8
 80027c4:	623b      	str	r3, [r7, #32]
          break;
 80027c6:	e01f      	b.n	8002808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	330c      	adds	r3, #12
 80027ce:	623b      	str	r3, [r7, #32]
          break;
 80027d0:	e01a      	b.n	8002808 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80027da:	2304      	movs	r3, #4
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e013      	b.n	8002808 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d105      	bne.n	80027f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027e8:	2308      	movs	r3, #8
 80027ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69fa      	ldr	r2, [r7, #28]
 80027f0:	611a      	str	r2, [r3, #16]
          break;
 80027f2:	e009      	b.n	8002808 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027f4:	2308      	movs	r3, #8
 80027f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69fa      	ldr	r2, [r7, #28]
 80027fc:	615a      	str	r2, [r3, #20]
          break;
 80027fe:	e003      	b.n	8002808 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
          break;
 8002804:	e000      	b.n	8002808 <HAL_GPIO_Init+0x130>
          break;
 8002806:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d801      	bhi.n	8002812 <HAL_GPIO_Init+0x13a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	e001      	b.n	8002816 <HAL_GPIO_Init+0x13e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	2bff      	cmp	r3, #255	; 0xff
 800281c:	d802      	bhi.n	8002824 <HAL_GPIO_Init+0x14c>
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	e002      	b.n	800282a <HAL_GPIO_Init+0x152>
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3b08      	subs	r3, #8
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	210f      	movs	r1, #15
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	fa01 f303 	lsl.w	r3, r1, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	401a      	ands	r2, r3
 800283c:	6a39      	ldr	r1, [r7, #32]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	431a      	orrs	r2, r3
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80b1 	beq.w	80029ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002858:	4b4d      	ldr	r3, [pc, #308]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a4c      	ldr	r2, [pc, #304]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b4a      	ldr	r3, [pc, #296]	; (8002990 <HAL_GPIO_Init+0x2b8>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002870:	4a48      	ldr	r2, [pc, #288]	; (8002994 <HAL_GPIO_Init+0x2bc>)
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	220f      	movs	r2, #15
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a40      	ldr	r2, [pc, #256]	; (8002998 <HAL_GPIO_Init+0x2c0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d013      	beq.n	80028c4 <HAL_GPIO_Init+0x1ec>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3f      	ldr	r2, [pc, #252]	; (800299c <HAL_GPIO_Init+0x2c4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00d      	beq.n	80028c0 <HAL_GPIO_Init+0x1e8>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3e      	ldr	r2, [pc, #248]	; (80029a0 <HAL_GPIO_Init+0x2c8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d007      	beq.n	80028bc <HAL_GPIO_Init+0x1e4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a3d      	ldr	r2, [pc, #244]	; (80029a4 <HAL_GPIO_Init+0x2cc>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_GPIO_Init+0x1e0>
 80028b4:	2303      	movs	r3, #3
 80028b6:	e006      	b.n	80028c6 <HAL_GPIO_Init+0x1ee>
 80028b8:	2304      	movs	r3, #4
 80028ba:	e004      	b.n	80028c6 <HAL_GPIO_Init+0x1ee>
 80028bc:	2302      	movs	r3, #2
 80028be:	e002      	b.n	80028c6 <HAL_GPIO_Init+0x1ee>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_GPIO_Init+0x1ee>
 80028c4:	2300      	movs	r3, #0
 80028c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c8:	f002 0203 	and.w	r2, r2, #3
 80028cc:	0092      	lsls	r2, r2, #2
 80028ce:	4093      	lsls	r3, r2
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80028d6:	492f      	ldr	r1, [pc, #188]	; (8002994 <HAL_GPIO_Init+0x2bc>)
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028f0:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	492c      	ldr	r1, [pc, #176]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028fe:	4b2a      	ldr	r3, [pc, #168]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	43db      	mvns	r3, r3
 8002906:	4928      	ldr	r1, [pc, #160]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002908:	4013      	ands	r3, r2
 800290a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002918:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	4922      	ldr	r1, [pc, #136]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]
 8002924:	e006      	b.n	8002934 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	43db      	mvns	r3, r3
 800292e:	491e      	ldr	r1, [pc, #120]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002930:	4013      	ands	r3, r2
 8002932:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	4918      	ldr	r1, [pc, #96]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	43db      	mvns	r3, r3
 8002956:	4914      	ldr	r1, [pc, #80]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002958:	4013      	ands	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d021      	beq.n	80029ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002968:	4b0f      	ldr	r3, [pc, #60]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	490e      	ldr	r1, [pc, #56]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
 8002974:	e021      	b.n	80029ba <HAL_GPIO_Init+0x2e2>
 8002976:	bf00      	nop
 8002978:	10320000 	.word	0x10320000
 800297c:	10310000 	.word	0x10310000
 8002980:	10220000 	.word	0x10220000
 8002984:	10210000 	.word	0x10210000
 8002988:	10120000 	.word	0x10120000
 800298c:	10110000 	.word	0x10110000
 8002990:	40021000 	.word	0x40021000
 8002994:	40010000 	.word	0x40010000
 8002998:	40010800 	.word	0x40010800
 800299c:	40010c00 	.word	0x40010c00
 80029a0:	40011000 	.word	0x40011000
 80029a4:	40011400 	.word	0x40011400
 80029a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029ac:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_GPIO_Init+0x304>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	4909      	ldr	r1, [pc, #36]	; (80029dc <HAL_GPIO_Init+0x304>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	3301      	adds	r3, #1
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f47f ae8e 	bne.w	80026ec <HAL_GPIO_Init+0x14>
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	372c      	adds	r7, #44	; 0x2c
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	40010400 	.word	0x40010400

080029e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	460b      	mov	r3, r1
 80029ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	887b      	ldrh	r3, [r7, #2]
 80029f2:	4013      	ands	r3, r2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d002      	beq.n	80029fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e001      	b.n	8002a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a1e:	787b      	ldrb	r3, [r7, #1]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a24:	887a      	ldrh	r2, [r7, #2]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a2a:	e003      	b.n	8002a34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	041a      	lsls	r2, r3, #16
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	611a      	str	r2, [r3, #16]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a50:	887a      	ldrh	r2, [r7, #2]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4013      	ands	r3, r2
 8002a56:	041a      	lsls	r2, r3, #16
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	887b      	ldrh	r3, [r7, #2]
 8002a5e:	400b      	ands	r3, r1
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	611a      	str	r2, [r3, #16]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e272      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8087 	beq.w	8002b9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a90:	4b92      	ldr	r3, [pc, #584]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a9c:	4b8f      	ldr	r3, [pc, #572]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d112      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
 8002aa8:	4b8c      	ldr	r3, [pc, #560]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d10b      	bne.n	8002ace <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab6:	4b89      	ldr	r3, [pc, #548]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d06c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x12c>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d168      	bne.n	8002b9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e24c      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d106      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x76>
 8002ad8:	4b80      	ldr	r3, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a7f      	ldr	r2, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	e02e      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x98>
 8002aee:	4b7b      	ldr	r3, [pc, #492]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7a      	ldr	r2, [pc, #488]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b78      	ldr	r3, [pc, #480]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a77      	ldr	r2, [pc, #476]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01d      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0xbc>
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a71      	ldr	r2, [pc, #452]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b2c:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a6a      	ldr	r2, [pc, #424]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	4b68      	ldr	r3, [pc, #416]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a67      	ldr	r2, [pc, #412]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d013      	beq.n	8002b74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7ff fbfc 	bl	8002348 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7ff fbf8 	bl	8002348 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	; 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e200      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b5d      	ldr	r3, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCC_OscConfig+0xe4>
 8002b72:	e014      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7ff fbe8 	bl	8002348 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b7c:	f7ff fbe4 	bl	8002348 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b64      	cmp	r3, #100	; 0x64
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e1ec      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x10c>
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d063      	beq.n	8002c72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002baa:	4b4c      	ldr	r3, [pc, #304]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00b      	beq.n	8002bce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002bb6:	4b49      	ldr	r3, [pc, #292]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d11c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
 8002bc2:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d001      	beq.n	8002be6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e1c0      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be6:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	4939      	ldr	r1, [pc, #228]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfa:	e03a      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d020      	beq.n	8002c46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c04:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c0a:	f7ff fb9d 	bl	8002348 <HAL_GetTick>
 8002c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c10:	e008      	b.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c12:	f7ff fb99 	bl	8002348 <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e1a1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0f0      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c30:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4927      	ldr	r1, [pc, #156]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	e015      	b.n	8002c72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x270>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7ff fb7c 	bl	8002348 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c54:	f7ff fb78 	bl	8002348 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e180      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03a      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d019      	beq.n	8002cba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7ff fb5c 	bl	8002348 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c94:	f7ff fb58 	bl	8002348 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e160      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f000 fad8 	bl	8003268 <RCC_Delay>
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_OscConfig+0x274>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc0:	f7ff fb42 	bl	8002348 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc6:	e00f      	b.n	8002ce8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cc8:	f7ff fb3e 	bl	8002348 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d908      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e146      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	42420000 	.word	0x42420000
 8002ce4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ce8:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1e9      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80a6 	beq.w	8002e4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d06:	4b8b      	ldr	r3, [pc, #556]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10d      	bne.n	8002d2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4a87      	ldr	r2, [pc, #540]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	61d3      	str	r3, [r2, #28]
 8002d1e:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2e:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d3a:	4b7f      	ldr	r3, [pc, #508]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7e      	ldr	r2, [pc, #504]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d46:	f7ff faff 	bl	8002348 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4e:	f7ff fafb 	bl	8002348 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e103      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_OscConfig+0x4c8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x312>
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e02d      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x334>
 8002d8a:	4b6a      	ldr	r3, [pc, #424]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	4a69      	ldr	r2, [pc, #420]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6213      	str	r3, [r2, #32]
 8002d96:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6213      	str	r3, [r2, #32]
 8002da2:	e01c      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d10c      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x356>
 8002dac:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4a60      	ldr	r2, [pc, #384]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	6213      	str	r3, [r2, #32]
 8002db8:	4b5e      	ldr	r3, [pc, #376]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	4a5d      	ldr	r2, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6213      	str	r3, [r2, #32]
 8002dc4:	e00b      	b.n	8002dde <HAL_RCC_OscConfig+0x36e>
 8002dc6:	4b5b      	ldr	r3, [pc, #364]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4a5a      	ldr	r2, [pc, #360]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	6213      	str	r3, [r2, #32]
 8002dd2:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002dd8:	f023 0304 	bic.w	r3, r3, #4
 8002ddc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d015      	beq.n	8002e12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7ff faaf 	bl	8002348 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7ff faab 	bl	8002348 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0b1      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e04:	4b4b      	ldr	r3, [pc, #300]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d0ee      	beq.n	8002dee <HAL_RCC_OscConfig+0x37e>
 8002e10:	e014      	b.n	8002e3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e12:	f7ff fa99 	bl	8002348 <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e18:	e00a      	b.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1a:	f7ff fa95 	bl	8002348 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e09b      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e30:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1ee      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d105      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 8087 	beq.w	8002f66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d061      	beq.n	8002f28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d146      	bne.n	8002efa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b33      	ldr	r3, [pc, #204]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7ff fa69 	bl	8002348 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7ff fa65 	bl	8002348 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e06d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e8c:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea0:	d108      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4921      	ldr	r1, [pc, #132]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb4:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a19      	ldr	r1, [r3, #32]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	491b      	ldr	r1, [pc, #108]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed2:	f7ff fa39 	bl	8002348 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7ff fa35 	bl	8002348 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e03d      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x46a>
 8002ef8:	e035      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_RCC_OscConfig+0x4cc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7ff fa22 	bl	8002348 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f08:	f7ff fa1e 	bl	8002348 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e026      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0x498>
 8002f26:	e01e      	b.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e019      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
 8002f3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f40:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <HAL_RCC_OscConfig+0x500>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0d0      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d910      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f96:	4b67      	ldr	r3, [pc, #412]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 0207 	bic.w	r2, r3, #7
 8002f9e:	4965      	ldr	r1, [pc, #404]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fa6:	4b63      	ldr	r3, [pc, #396]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0b8      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d020      	beq.n	8003006 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd0:	4b59      	ldr	r3, [pc, #356]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4a58      	ldr	r2, [pc, #352]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ff2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff4:	4b50      	ldr	r3, [pc, #320]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d040      	beq.n	8003094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d115      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07f      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d107      	bne.n	8003042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e073      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003042:	4b3d      	ldr	r3, [pc, #244]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06b      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003052:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f023 0203 	bic.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4936      	ldr	r1, [pc, #216]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003064:	f7ff f970 	bl	8002348 <HAL_GetTick>
 8003068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	e00a      	b.n	8003082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306c:	f7ff f96c 	bl	8002348 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	f241 3288 	movw	r2, #5000	; 0x1388
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e053      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003082:	4b2d      	ldr	r3, [pc, #180]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 020c 	and.w	r2, r3, #12
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	429a      	cmp	r2, r3
 8003092:	d1eb      	bne.n	800306c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003094:	4b27      	ldr	r3, [pc, #156]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d210      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 0207 	bic.w	r2, r3, #7
 80030aa:	4922      	ldr	r1, [pc, #136]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d001      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e032      	b.n	800312a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d008      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4916      	ldr	r1, [pc, #88]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030ee:	4b12      	ldr	r3, [pc, #72]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	490e      	ldr	r1, [pc, #56]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003102:	f000 f821 	bl	8003148 <HAL_RCC_GetSysClockFreq>
 8003106:	4602      	mov	r2, r0
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	490a      	ldr	r1, [pc, #40]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003114:	5ccb      	ldrb	r3, [r1, r3]
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_RCC_ClockConfig+0x1cc>)
 800311c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f8ce 	bl	80022c4 <HAL_InitTick>

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40022000 	.word	0x40022000
 8003138:	40021000 	.word	0x40021000
 800313c:	08005370 	.word	0x08005370
 8003140:	20000028 	.word	0x20000028
 8003144:	2000002c 	.word	0x2000002c

08003148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003148:	b490      	push	{r4, r7}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003150:	1d3c      	adds	r4, r7, #4
 8003152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003158:	f240 2301 	movw	r3, #513	; 0x201
 800315c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	2300      	movs	r3, #0
 8003164:	61bb      	str	r3, [r7, #24]
 8003166:	2300      	movs	r3, #0
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d002      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0x40>
 8003182:	2b08      	cmp	r3, #8
 8003184:	d003      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x46>
 8003186:	e02b      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003188:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800318a:	623b      	str	r3, [r7, #32]
      break;
 800318c:	e02b      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	0c9b      	lsrs	r3, r3, #18
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	3328      	adds	r3, #40	; 0x28
 8003198:	443b      	add	r3, r7
 800319a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800319e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d012      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	0c5b      	lsrs	r3, r3, #17
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	3328      	adds	r3, #40	; 0x28
 80031b6:	443b      	add	r3, r7
 80031b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80031bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a0e      	ldr	r2, [pc, #56]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80031c2:	fb03 f202 	mul.w	r2, r3, r2
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	e004      	b.n	80031da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_RCC_GetSysClockFreq+0xb8>)
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	623b      	str	r3, [r7, #32]
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80031e2:	623b      	str	r3, [r7, #32]
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6a3b      	ldr	r3, [r7, #32]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc90      	pop	{r4, r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	08005360 	.word	0x08005360
 80031f8:	40021000 	.word	0x40021000
 80031fc:	007a1200 	.word	0x007a1200
 8003200:	003d0900 	.word	0x003d0900

08003204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003208:	4b02      	ldr	r3, [pc, #8]	; (8003214 <HAL_RCC_GetHCLKFreq+0x10>)
 800320a:	681b      	ldr	r3, [r3, #0]
}
 800320c:	4618      	mov	r0, r3
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr
 8003214:	20000028 	.word	0x20000028

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff2 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	; (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	; (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08005380 	.word	0x08005380

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffde 	bl	8003204 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	0adb      	lsrs	r3, r3, #11
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	; (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000
 8003264:	08005380 	.word	0x08005380

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000028 	.word	0x20000028
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e041      	b.n	800333a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fc14 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 fc28 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d001      	beq.n	800335c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e03a      	b.n	80033d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_TIM_Base_Start_IT+0x98>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x58>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003386:	d009      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x58>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x58>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a13      	ldr	r2, [pc, #76]	; (80033e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d111      	bne.n	80033c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d010      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033be:	e007      	b.n	80033d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800

080033e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e041      	b.n	800347e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f839 	bl	8003486 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f000 fb86 	bl	8003b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d109      	bne.n	80034bc <HAL_TIM_PWM_Start+0x24>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	bf14      	ite	ne
 80034b4:	2301      	movne	r3, #1
 80034b6:	2300      	moveq	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	e022      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d109      	bne.n	80034d6 <HAL_TIM_PWM_Start+0x3e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	bf14      	ite	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	2300      	moveq	r3, #0
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	e015      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d109      	bne.n	80034f0 <HAL_TIM_PWM_Start+0x58>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	bf14      	ite	ne
 80034e8:	2301      	movne	r3, #1
 80034ea:	2300      	moveq	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e008      	b.n	8003502 <HAL_TIM_PWM_Start+0x6a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e05e      	b.n	80035c8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d104      	bne.n	800351a <HAL_TIM_PWM_Start+0x82>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003518:	e013      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d104      	bne.n	800352a <HAL_TIM_PWM_Start+0x92>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003528:	e00b      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d104      	bne.n	800353a <HAL_TIM_PWM_Start+0xa2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003538:	e003      	b.n	8003542 <HAL_TIM_PWM_Start+0xaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2202      	movs	r2, #2
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	6839      	ldr	r1, [r7, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fd74 	bl	8004038 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <HAL_TIM_PWM_Start+0x138>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d107      	bne.n	800356a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a18      	ldr	r2, [pc, #96]	; (80035d0 <HAL_TIM_PWM_Start+0x138>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00e      	beq.n	8003592 <HAL_TIM_PWM_Start+0xfa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d009      	beq.n	8003592 <HAL_TIM_PWM_Start+0xfa>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <HAL_TIM_PWM_Start+0x13c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIM_PWM_Start+0xfa>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <HAL_TIM_PWM_Start+0x140>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d111      	bne.n	80035b6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d010      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	e007      	b.n	80035c6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800

080035dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d122      	bne.n	8003638 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d11b      	bne.n	8003638 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0202 	mvn.w	r2, #2
 8003608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f003 0303 	and.w	r3, r3, #3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa6f 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 8003624:	e005      	b.n	8003632 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa62 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fa71 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b04      	cmp	r3, #4
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b04      	cmp	r3, #4
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0204 	mvn.w	r2, #4
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa45 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa38 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fa47 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b08      	cmp	r3, #8
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0208 	mvn.w	r2, #8
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2204      	movs	r2, #4
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa1b 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fa0e 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fa1d 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0310 	and.w	r3, r3, #16
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0210 	mvn.w	r2, #16
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2208      	movs	r2, #8
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f9f1 	bl	8003b02 <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f9e4 	bl	8003af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f9f3 	bl	8003b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0201 	mvn.w	r2, #1
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7fe fb7a 	bl	8001e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800376a:	2b80      	cmp	r3, #128	; 0x80
 800376c:	d10e      	bne.n	800378c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b80      	cmp	r3, #128	; 0x80
 800377a:	d107      	bne.n	800378c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fce1 	bl	800414e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b40      	cmp	r3, #64	; 0x40
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b40      	cmp	r3, #64	; 0x40
 80037a6:	d107      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9b7 	bl	8003b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d10e      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d107      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0220 	mvn.w	r2, #32
 80037dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fcac 	bl	800413c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003802:	2302      	movs	r3, #2
 8003804:	e0ac      	b.n	8003960 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b0c      	cmp	r3, #12
 8003812:	f200 809f 	bhi.w	8003954 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003851 	.word	0x08003851
 8003820:	08003955 	.word	0x08003955
 8003824:	08003955 	.word	0x08003955
 8003828:	08003955 	.word	0x08003955
 800382c:	08003891 	.word	0x08003891
 8003830:	08003955 	.word	0x08003955
 8003834:	08003955 	.word	0x08003955
 8003838:	08003955 	.word	0x08003955
 800383c:	080038d3 	.word	0x080038d3
 8003840:	08003955 	.word	0x08003955
 8003844:	08003955 	.word	0x08003955
 8003848:	08003955 	.word	0x08003955
 800384c:	08003913 	.word	0x08003913
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 f9d0 	bl	8003bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0208 	orr.w	r2, r2, #8
 800386a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0204 	bic.w	r2, r2, #4
 800387a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6999      	ldr	r1, [r3, #24]
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	619a      	str	r2, [r3, #24]
      break;
 800388e:	e062      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68b9      	ldr	r1, [r7, #8]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fa16 	bl	8003cc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6999      	ldr	r1, [r3, #24]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	021a      	lsls	r2, r3, #8
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	619a      	str	r2, [r3, #24]
      break;
 80038d0:	e041      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fa5f 	bl	8003d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	69da      	ldr	r2, [r3, #28]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0208 	orr.w	r2, r2, #8
 80038ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0204 	bic.w	r2, r2, #4
 80038fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69d9      	ldr	r1, [r3, #28]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	61da      	str	r2, [r3, #28]
      break;
 8003910:	e021      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68b9      	ldr	r1, [r7, #8]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 faa9 	bl	8003e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800392c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	69da      	ldr	r2, [r3, #28]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800393c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69d9      	ldr	r1, [r3, #28]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	61da      	str	r2, [r3, #28]
      break;
 8003952:	e000      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIM_ConfigClockSource+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e0b3      	b.n	8003ae8 <HAL_TIM_ConfigClockSource+0x180>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800399e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b8:	d03e      	beq.n	8003a38 <HAL_TIM_ConfigClockSource+0xd0>
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039be:	f200 8087 	bhi.w	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	f000 8085 	beq.w	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ce:	d87f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039d0:	2b70      	cmp	r3, #112	; 0x70
 80039d2:	d01a      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0xa2>
 80039d4:	2b70      	cmp	r3, #112	; 0x70
 80039d6:	d87b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d050      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x116>
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d877      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039e0:	2b50      	cmp	r3, #80	; 0x50
 80039e2:	d03c      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0xf6>
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d873      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d058      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x136>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d86f      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039f0:	2b30      	cmp	r3, #48	; 0x30
 80039f2:	d064      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d86b      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d060      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d867      	bhi.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05c      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
 8003a04:	2b10      	cmp	r3, #16
 8003a06:	d05a      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003a08:	e062      	b.n	8003ad0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6899      	ldr	r1, [r3, #8]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f000 faee 	bl	8003ffa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	609a      	str	r2, [r3, #8]
      break;
 8003a36:	e04e      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6818      	ldr	r0, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f000 fad7 	bl	8003ffa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5a:	609a      	str	r2, [r3, #8]
      break;
 8003a5c:	e03b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f000 fa4e 	bl	8003f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2150      	movs	r1, #80	; 0x50
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 faa5 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e02b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fa6c 	bl	8003f68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2160      	movs	r1, #96	; 0x60
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fa95 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e01b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fa2e 	bl	8003f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2140      	movs	r1, #64	; 0x40
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fa85 	bl	8003fc6 <TIM_ITRx_SetConfig>
      break;
 8003abc:	e00b      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f000 fa7c 	bl	8003fc6 <TIM_ITRx_SetConfig>
        break;
 8003ace:	e002      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ad4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bc80      	pop	{r7}
 8003b24:	4770      	bx	lr

08003b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <TIM_Base_SetConfig+0xb8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <TIM_Base_SetConfig+0x30>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b56:	d007      	beq.n	8003b68 <TIM_Base_SetConfig+0x30>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a26      	ldr	r2, [pc, #152]	; (8003bf4 <TIM_Base_SetConfig+0xbc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_Base_SetConfig+0x30>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a25      	ldr	r2, [pc, #148]	; (8003bf8 <TIM_Base_SetConfig+0xc0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	; (8003bf0 <TIM_Base_SetConfig+0xb8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_Base_SetConfig+0x62>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0x62>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <TIM_Base_SetConfig+0xbc>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a18      	ldr	r2, [pc, #96]	; (8003bf8 <TIM_Base_SetConfig+0xc0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a07      	ldr	r2, [pc, #28]	; (8003bf0 <TIM_Base_SetConfig+0xb8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d103      	bne.n	8003be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	615a      	str	r2, [r3, #20]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800

08003bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	f023 0201 	bic.w	r2, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0303 	bic.w	r3, r3, #3
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f023 0302 	bic.w	r3, r3, #2
 8003c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <TIM_OC1_SetConfig+0xc8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10c      	bne.n	8003c72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0308 	bic.w	r3, r3, #8
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <TIM_OC1_SetConfig+0xc8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	621a      	str	r2, [r3, #32]
}
 8003cb8:	bf00      	nop
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40012c00 	.word	0x40012c00

08003cc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f023 0210 	bic.w	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f023 0320 	bic.w	r3, r3, #32
 8003d12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <TIM_OC2_SetConfig+0xd0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10d      	bne.n	8003d44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a14      	ldr	r2, [pc, #80]	; (8003d98 <TIM_OC2_SetConfig+0xd0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d113      	bne.n	8003d74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr
 8003d98:	40012c00 	.word	0x40012c00

08003d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a1d      	ldr	r2, [pc, #116]	; (8003e6c <TIM_OC3_SetConfig+0xd0>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10d      	bne.n	8003e16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	021b      	lsls	r3, r3, #8
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a14      	ldr	r2, [pc, #80]	; (8003e6c <TIM_OC3_SetConfig+0xd0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d113      	bne.n	8003e46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40012c00 	.word	0x40012c00

08003e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <TIM_OC4_SetConfig+0x98>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d109      	bne.n	8003ee4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	019b      	lsls	r3, r3, #6
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	621a      	str	r2, [r3, #32]
}
 8003efe:	bf00      	nop
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	40012c00 	.word	0x40012c00

08003f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 030a 	bic.w	r3, r3, #10
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f023 0210 	bic.w	r2, r3, #16
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	031b      	lsls	r3, r3, #12
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	621a      	str	r2, [r3, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b085      	sub	sp, #20
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
 8003fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f043 0307 	orr.w	r3, r3, #7
 8003fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	609a      	str	r2, [r3, #8]
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004014:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	021a      	lsls	r2, r3, #8
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	431a      	orrs	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	4313      	orrs	r3, r2
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	609a      	str	r2, [r3, #8]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 031f 	and.w	r3, r3, #31
 800404a:	2201      	movs	r2, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1a      	ldr	r2, [r3, #32]
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	43db      	mvns	r3, r3
 800405a:	401a      	ands	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	fa01 f303 	lsl.w	r3, r1, r3
 8004070:	431a      	orrs	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	621a      	str	r2, [r3, #32]
}
 8004076:	bf00      	nop
 8004078:	371c      	adds	r7, #28
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr

08004080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004090:	2b01      	cmp	r3, #1
 8004092:	d101      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004094:	2302      	movs	r3, #2
 8004096:	e046      	b.n	8004126 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e4:	d009      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a10      	ldr	r2, [pc, #64]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d10c      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800

0800413c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e03f      	b.n	80041f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fd20 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2224      	movs	r2, #36	; 0x24
 8004190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fb8d 	bl	80048c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	4613      	mov	r3, r2
 8004206:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b20      	cmp	r3, #32
 8004212:	d130      	bne.n	8004276 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d002      	beq.n	8004220 <HAL_UART_Transmit_IT+0x26>
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e029      	b.n	8004278 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_UART_Transmit_IT+0x38>
 800422e:	2302      	movs	r3, #2
 8004230:	e022      	b.n	8004278 <HAL_UART_Transmit_IT+0x7e>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	88fa      	ldrh	r2, [r7, #6]
 8004244:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	88fa      	ldrh	r2, [r7, #6]
 800424a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2221      	movs	r2, #33	; 0x21
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004270:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004276:	2302      	movs	r3, #2
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
	...

08004284 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ae:	f003 030f 	and.w	r3, r3, #15
 80042b2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10d      	bne.n	80042d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_UART_IRQHandler+0x52>
 80042c4:	6a3b      	ldr	r3, [r7, #32]
 80042c6:	f003 0320 	and.w	r3, r3, #32
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa4f 	bl	8004772 <UART_Receive_IT>
      return;
 80042d4:	e17b      	b.n	80045ce <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80b1 	beq.w	8004440 <HAL_UART_IRQHandler+0x1bc>
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <HAL_UART_IRQHandler+0x70>
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80a6 	beq.w	8004440 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_UART_IRQHandler+0x90>
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f043 0201 	orr.w	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00a      	beq.n	8004334 <HAL_UART_IRQHandler+0xb0>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d005      	beq.n	8004334 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f043 0202 	orr.w	r2, r3, #2
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_UART_IRQHandler+0xd0>
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0204 	orr.w	r2, r3, #4
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00f      	beq.n	800437e <HAL_UART_IRQHandler+0xfa>
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <HAL_UART_IRQHandler+0xee>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f043 0208 	orr.w	r2, r3, #8
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 811e 	beq.w	80045c4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d007      	beq.n	80043a2 <HAL_UART_IRQHandler+0x11e>
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 f9e8 	bl	8004772 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	f003 0308 	and.w	r3, r3, #8
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d102      	bne.n	80043ca <HAL_UART_IRQHandler+0x146>
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d031      	beq.n	800442e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f92a 	bl	8004624 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d023      	beq.n	8004426 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d013      	beq.n	800441e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	4a76      	ldr	r2, [pc, #472]	; (80045d4 <HAL_UART_IRQHandler+0x350>)
 80043fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe f8f2 	bl	80025ec <HAL_DMA_Abort_IT>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004418:	4610      	mov	r0, r2
 800441a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800441c:	e00e      	b.n	800443c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f8ec 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004424:	e00a      	b.n	800443c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f8e8 	bl	80045fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800442c:	e006      	b.n	800443c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f8e4 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800443a:	e0c3      	b.n	80045c4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	bf00      	nop
    return;
 800443e:	e0c1      	b.n	80045c4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	2b01      	cmp	r3, #1
 8004446:	f040 80a1 	bne.w	800458c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 809b 	beq.w	800458c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 8095 	beq.w	800458c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04e      	beq.n	8004524 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004490:	8a3b      	ldrh	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8098 	beq.w	80045c8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800449c:	8a3a      	ldrh	r2, [r7, #16]
 800449e:	429a      	cmp	r2, r3
 80044a0:	f080 8092 	bcs.w	80045c8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	8a3a      	ldrh	r2, [r7, #16]
 80044a8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d02b      	beq.n	800450c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044c2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695a      	ldr	r2, [r3, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0210 	bic.w	r2, r2, #16
 8004500:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe f835 	bl	8002576 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004514:	b29b      	uxth	r3, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	b29b      	uxth	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f876 	bl	800460e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004522:	e051      	b.n	80045c8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800452c:	b29b      	uxth	r3, r3
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d047      	beq.n	80045cc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800453c:	8a7b      	ldrh	r3, [r7, #18]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d044      	beq.n	80045cc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004550:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0210 	bic.w	r2, r2, #16
 800457e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004580:	8a7b      	ldrh	r3, [r7, #18]
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f842 	bl	800460e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800458a:	e01f      	b.n	80045cc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004592:	2b00      	cmp	r3, #0
 8004594:	d008      	beq.n	80045a8 <HAL_UART_IRQHandler+0x324>
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f87f 	bl	80046a4 <UART_Transmit_IT>
    return;
 80045a6:	e012      	b.n	80045ce <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00d      	beq.n	80045ce <HAL_UART_IRQHandler+0x34a>
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8c0 	bl	8004742 <UART_EndTransmit_IT>
    return;
 80045c2:	e004      	b.n	80045ce <HAL_UART_IRQHandler+0x34a>
    return;
 80045c4:	bf00      	nop
 80045c6:	e002      	b.n	80045ce <HAL_UART_IRQHandler+0x34a>
      return;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_UART_IRQHandler+0x34a>
      return;
 80045cc:	bf00      	nop
  }
}
 80045ce:	3728      	adds	r7, #40	; 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	0800467d 	.word	0x0800467d

080045d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	460b      	mov	r3, r1
 8004618:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800463a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695a      	ldr	r2, [r3, #20]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004650:	2b01      	cmp	r3, #1
 8004652:	d107      	bne.n	8004664 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f022 0210 	bic.w	r2, r2, #16
 8004662:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	bc80      	pop	{r7}
 800467a:	4770      	bx	lr

0800467c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f7ff ffb0 	bl	80045fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800469c:	bf00      	nop
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b21      	cmp	r3, #33	; 0x21
 80046b6:	d13e      	bne.n	8004736 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d114      	bne.n	80046ec <UART_Transmit_IT+0x48>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d110      	bne.n	80046ec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	461a      	mov	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	1c9a      	adds	r2, r3, #2
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	621a      	str	r2, [r3, #32]
 80046ea:	e008      	b.n	80046fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	1c59      	adds	r1, r3, #1
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6211      	str	r1, [r2, #32]
 80046f6:	781a      	ldrb	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4619      	mov	r1, r3
 800470c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10f      	bne.n	8004732 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004720:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68da      	ldr	r2, [r3, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004730:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e000      	b.n	8004738 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004736:	2302      	movs	r3, #2
  }
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr

08004742 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b082      	sub	sp, #8
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68da      	ldr	r2, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004758:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff38 	bl	80045d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b086      	sub	sp, #24
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b22      	cmp	r3, #34	; 0x22
 8004784:	f040 8099 	bne.w	80048ba <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004790:	d117      	bne.n	80047c2 <UART_Receive_IT+0x50>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d113      	bne.n	80047c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	1c9a      	adds	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28
 80047c0:	e026      	b.n	8004810 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d4:	d007      	beq.n	80047e6 <UART_Receive_IT+0x74>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <UART_Receive_IT+0x82>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	e008      	b.n	8004806 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004800:	b2da      	uxtb	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29b      	uxth	r3, r3
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4619      	mov	r1, r3
 800481e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004820:	2b00      	cmp	r3, #0
 8004822:	d148      	bne.n	80048b6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0220 	bic.w	r2, r2, #32
 8004832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695a      	ldr	r2, [r3, #20]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	2b01      	cmp	r3, #1
 8004862:	d123      	bne.n	80048ac <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0210 	bic.w	r2, r2, #16
 8004878:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0310 	and.w	r3, r3, #16
 8004884:	2b10      	cmp	r3, #16
 8004886:	d10a      	bne.n	800489e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff feb2 	bl	800460e <HAL_UARTEx_RxEventCallback>
 80048aa:	e002      	b.n	80048b2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fe9c 	bl	80045ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e002      	b.n	80048bc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048fe:	f023 030c 	bic.w	r3, r3, #12
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	430b      	orrs	r3, r1
 800490a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <UART_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800492c:	f7fe fc88 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	e002      	b.n	800493a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004934:	f7fe fc70 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004938:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009a      	lsls	r2, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	4a22      	ldr	r2, [pc, #136]	; (80049dc <UART_SetConfig+0x118>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	0119      	lsls	r1, r3, #4
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004970:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <UART_SetConfig+0x118>)
 8004972:	fba3 0302 	umull	r0, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2064      	movs	r0, #100	; 0x64
 800497a:	fb00 f303 	mul.w	r3, r0, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <UART_SetConfig+0x118>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004990:	4419      	add	r1, r3
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009a      	lsls	r2, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <UART_SetConfig+0x118>)
 80049aa:	fba3 0302 	umull	r0, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2064      	movs	r0, #100	; 0x64
 80049b2:	fb00 f303 	mul.w	r3, r0, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	3332      	adds	r3, #50	; 0x32
 80049bc:	4a07      	ldr	r2, [pc, #28]	; (80049dc <UART_SetConfig+0x118>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	440a      	add	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40013800 	.word	0x40013800
 80049dc:	51eb851f 	.word	0x51eb851f

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000034 	.word	0x20000034

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	2600      	movs	r6, #0
 80049f0:	4d0c      	ldr	r5, [pc, #48]	; (8004a24 <__libc_init_array+0x38>)
 80049f2:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	f000 fc9c 	bl	8005338 <_init>
 8004a00:	2600      	movs	r6, #0
 8004a02:	4d0a      	ldr	r5, [pc, #40]	; (8004a2c <__libc_init_array+0x40>)
 8004a04:	4c0a      	ldr	r4, [pc, #40]	; (8004a30 <__libc_init_array+0x44>)
 8004a06:	1b64      	subs	r4, r4, r5
 8004a08:	10a4      	asrs	r4, r4, #2
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	080053bc 	.word	0x080053bc
 8004a28:	080053bc 	.word	0x080053bc
 8004a2c:	080053bc 	.word	0x080053bc
 8004a30:	080053c0 	.word	0x080053c0

08004a34 <memset>:
 8004a34:	4603      	mov	r3, r0
 8004a36:	4402      	add	r2, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <siprintf>:
 8004a44:	b40e      	push	{r1, r2, r3}
 8004a46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a4a:	b500      	push	{lr}
 8004a4c:	b09c      	sub	sp, #112	; 0x70
 8004a4e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a50:	9002      	str	r0, [sp, #8]
 8004a52:	9006      	str	r0, [sp, #24]
 8004a54:	9107      	str	r1, [sp, #28]
 8004a56:	9104      	str	r1, [sp, #16]
 8004a58:	4808      	ldr	r0, [pc, #32]	; (8004a7c <siprintf+0x38>)
 8004a5a:	4909      	ldr	r1, [pc, #36]	; (8004a80 <siprintf+0x3c>)
 8004a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a60:	9105      	str	r1, [sp, #20]
 8004a62:	6800      	ldr	r0, [r0, #0]
 8004a64:	a902      	add	r1, sp, #8
 8004a66:	9301      	str	r3, [sp, #4]
 8004a68:	f000 f868 	bl	8004b3c <_svfiprintf_r>
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	9b02      	ldr	r3, [sp, #8]
 8004a70:	701a      	strb	r2, [r3, #0]
 8004a72:	b01c      	add	sp, #112	; 0x70
 8004a74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a78:	b003      	add	sp, #12
 8004a7a:	4770      	bx	lr
 8004a7c:	20000034 	.word	0x20000034
 8004a80:	ffff0208 	.word	0xffff0208

08004a84 <__ssputs_r>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	688e      	ldr	r6, [r1, #8]
 8004a8a:	4682      	mov	sl, r0
 8004a8c:	429e      	cmp	r6, r3
 8004a8e:	460c      	mov	r4, r1
 8004a90:	4690      	mov	r8, r2
 8004a92:	461f      	mov	r7, r3
 8004a94:	d838      	bhi.n	8004b08 <__ssputs_r+0x84>
 8004a96:	898a      	ldrh	r2, [r1, #12]
 8004a98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a9c:	d032      	beq.n	8004b04 <__ssputs_r+0x80>
 8004a9e:	6825      	ldr	r5, [r4, #0]
 8004aa0:	6909      	ldr	r1, [r1, #16]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	eba5 0901 	sub.w	r9, r5, r1
 8004aa8:	6965      	ldr	r5, [r4, #20]
 8004aaa:	444b      	add	r3, r9
 8004aac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ab0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ab4:	106d      	asrs	r5, r5, #1
 8004ab6:	429d      	cmp	r5, r3
 8004ab8:	bf38      	it	cc
 8004aba:	461d      	movcc	r5, r3
 8004abc:	0553      	lsls	r3, r2, #21
 8004abe:	d531      	bpl.n	8004b24 <__ssputs_r+0xa0>
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	f000 fb6f 	bl	80051a4 <_malloc_r>
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	b950      	cbnz	r0, 8004ae0 <__ssputs_r+0x5c>
 8004aca:	230c      	movs	r3, #12
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	f8ca 3000 	str.w	r3, [sl]
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ada:	81a3      	strh	r3, [r4, #12]
 8004adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae0:	464a      	mov	r2, r9
 8004ae2:	6921      	ldr	r1, [r4, #16]
 8004ae4:	f000 face 	bl	8005084 <memcpy>
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	6126      	str	r6, [r4, #16]
 8004af6:	444e      	add	r6, r9
 8004af8:	6026      	str	r6, [r4, #0]
 8004afa:	463e      	mov	r6, r7
 8004afc:	6165      	str	r5, [r4, #20]
 8004afe:	eba5 0509 	sub.w	r5, r5, r9
 8004b02:	60a5      	str	r5, [r4, #8]
 8004b04:	42be      	cmp	r6, r7
 8004b06:	d900      	bls.n	8004b0a <__ssputs_r+0x86>
 8004b08:	463e      	mov	r6, r7
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4641      	mov	r1, r8
 8004b0e:	6820      	ldr	r0, [r4, #0]
 8004b10:	f000 fac6 	bl	80050a0 <memmove>
 8004b14:	68a3      	ldr	r3, [r4, #8]
 8004b16:	2000      	movs	r0, #0
 8004b18:	1b9b      	subs	r3, r3, r6
 8004b1a:	60a3      	str	r3, [r4, #8]
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	4433      	add	r3, r6
 8004b20:	6023      	str	r3, [r4, #0]
 8004b22:	e7db      	b.n	8004adc <__ssputs_r+0x58>
 8004b24:	462a      	mov	r2, r5
 8004b26:	f000 fbb1 	bl	800528c <_realloc_r>
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d1e1      	bne.n	8004af4 <__ssputs_r+0x70>
 8004b30:	4650      	mov	r0, sl
 8004b32:	6921      	ldr	r1, [r4, #16]
 8004b34:	f000 face 	bl	80050d4 <_free_r>
 8004b38:	e7c7      	b.n	8004aca <__ssputs_r+0x46>
	...

08004b3c <_svfiprintf_r>:
 8004b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b40:	4698      	mov	r8, r3
 8004b42:	898b      	ldrh	r3, [r1, #12]
 8004b44:	4607      	mov	r7, r0
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	460d      	mov	r5, r1
 8004b4a:	4614      	mov	r4, r2
 8004b4c:	b09d      	sub	sp, #116	; 0x74
 8004b4e:	d50e      	bpl.n	8004b6e <_svfiprintf_r+0x32>
 8004b50:	690b      	ldr	r3, [r1, #16]
 8004b52:	b963      	cbnz	r3, 8004b6e <_svfiprintf_r+0x32>
 8004b54:	2140      	movs	r1, #64	; 0x40
 8004b56:	f000 fb25 	bl	80051a4 <_malloc_r>
 8004b5a:	6028      	str	r0, [r5, #0]
 8004b5c:	6128      	str	r0, [r5, #16]
 8004b5e:	b920      	cbnz	r0, 8004b6a <_svfiprintf_r+0x2e>
 8004b60:	230c      	movs	r3, #12
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	f04f 30ff 	mov.w	r0, #4294967295
 8004b68:	e0d1      	b.n	8004d0e <_svfiprintf_r+0x1d2>
 8004b6a:	2340      	movs	r3, #64	; 0x40
 8004b6c:	616b      	str	r3, [r5, #20]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	9309      	str	r3, [sp, #36]	; 0x24
 8004b72:	2320      	movs	r3, #32
 8004b74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b78:	2330      	movs	r3, #48	; 0x30
 8004b7a:	f04f 0901 	mov.w	r9, #1
 8004b7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d28 <_svfiprintf_r+0x1ec>
 8004b86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	469a      	mov	sl, r3
 8004b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b92:	b10a      	cbz	r2, 8004b98 <_svfiprintf_r+0x5c>
 8004b94:	2a25      	cmp	r2, #37	; 0x25
 8004b96:	d1f9      	bne.n	8004b8c <_svfiprintf_r+0x50>
 8004b98:	ebba 0b04 	subs.w	fp, sl, r4
 8004b9c:	d00b      	beq.n	8004bb6 <_svfiprintf_r+0x7a>
 8004b9e:	465b      	mov	r3, fp
 8004ba0:	4622      	mov	r2, r4
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	4638      	mov	r0, r7
 8004ba6:	f7ff ff6d 	bl	8004a84 <__ssputs_r>
 8004baa:	3001      	adds	r0, #1
 8004bac:	f000 80aa 	beq.w	8004d04 <_svfiprintf_r+0x1c8>
 8004bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb2:	445a      	add	r2, fp
 8004bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 80a2 	beq.w	8004d04 <_svfiprintf_r+0x1c8>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bca:	f10a 0a01 	add.w	sl, sl, #1
 8004bce:	9304      	str	r3, [sp, #16]
 8004bd0:	9307      	str	r3, [sp, #28]
 8004bd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd8:	4654      	mov	r4, sl
 8004bda:	2205      	movs	r2, #5
 8004bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be0:	4851      	ldr	r0, [pc, #324]	; (8004d28 <_svfiprintf_r+0x1ec>)
 8004be2:	f000 fa41 	bl	8005068 <memchr>
 8004be6:	9a04      	ldr	r2, [sp, #16]
 8004be8:	b9d8      	cbnz	r0, 8004c22 <_svfiprintf_r+0xe6>
 8004bea:	06d0      	lsls	r0, r2, #27
 8004bec:	bf44      	itt	mi
 8004bee:	2320      	movmi	r3, #32
 8004bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf4:	0711      	lsls	r1, r2, #28
 8004bf6:	bf44      	itt	mi
 8004bf8:	232b      	movmi	r3, #43	; 0x2b
 8004bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004c02:	2b2a      	cmp	r3, #42	; 0x2a
 8004c04:	d015      	beq.n	8004c32 <_svfiprintf_r+0xf6>
 8004c06:	4654      	mov	r4, sl
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f04f 0c0a 	mov.w	ip, #10
 8004c0e:	9a07      	ldr	r2, [sp, #28]
 8004c10:	4621      	mov	r1, r4
 8004c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c16:	3b30      	subs	r3, #48	; 0x30
 8004c18:	2b09      	cmp	r3, #9
 8004c1a:	d94e      	bls.n	8004cba <_svfiprintf_r+0x17e>
 8004c1c:	b1b0      	cbz	r0, 8004c4c <_svfiprintf_r+0x110>
 8004c1e:	9207      	str	r2, [sp, #28]
 8004c20:	e014      	b.n	8004c4c <_svfiprintf_r+0x110>
 8004c22:	eba0 0308 	sub.w	r3, r0, r8
 8004c26:	fa09 f303 	lsl.w	r3, r9, r3
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	46a2      	mov	sl, r4
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	e7d2      	b.n	8004bd8 <_svfiprintf_r+0x9c>
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	1d19      	adds	r1, r3, #4
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	9103      	str	r1, [sp, #12]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	bfbb      	ittet	lt
 8004c3e:	425b      	neglt	r3, r3
 8004c40:	f042 0202 	orrlt.w	r2, r2, #2
 8004c44:	9307      	strge	r3, [sp, #28]
 8004c46:	9307      	strlt	r3, [sp, #28]
 8004c48:	bfb8      	it	lt
 8004c4a:	9204      	strlt	r2, [sp, #16]
 8004c4c:	7823      	ldrb	r3, [r4, #0]
 8004c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c50:	d10c      	bne.n	8004c6c <_svfiprintf_r+0x130>
 8004c52:	7863      	ldrb	r3, [r4, #1]
 8004c54:	2b2a      	cmp	r3, #42	; 0x2a
 8004c56:	d135      	bne.n	8004cc4 <_svfiprintf_r+0x188>
 8004c58:	9b03      	ldr	r3, [sp, #12]
 8004c5a:	3402      	adds	r4, #2
 8004c5c:	1d1a      	adds	r2, r3, #4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	9203      	str	r2, [sp, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	bfb8      	it	lt
 8004c66:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004d2c <_svfiprintf_r+0x1f0>
 8004c70:	2203      	movs	r2, #3
 8004c72:	4650      	mov	r0, sl
 8004c74:	7821      	ldrb	r1, [r4, #0]
 8004c76:	f000 f9f7 	bl	8005068 <memchr>
 8004c7a:	b140      	cbz	r0, 8004c8e <_svfiprintf_r+0x152>
 8004c7c:	2340      	movs	r3, #64	; 0x40
 8004c7e:	eba0 000a 	sub.w	r0, r0, sl
 8004c82:	fa03 f000 	lsl.w	r0, r3, r0
 8004c86:	9b04      	ldr	r3, [sp, #16]
 8004c88:	3401      	adds	r4, #1
 8004c8a:	4303      	orrs	r3, r0
 8004c8c:	9304      	str	r3, [sp, #16]
 8004c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c92:	2206      	movs	r2, #6
 8004c94:	4826      	ldr	r0, [pc, #152]	; (8004d30 <_svfiprintf_r+0x1f4>)
 8004c96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c9a:	f000 f9e5 	bl	8005068 <memchr>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d038      	beq.n	8004d14 <_svfiprintf_r+0x1d8>
 8004ca2:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <_svfiprintf_r+0x1f8>)
 8004ca4:	bb1b      	cbnz	r3, 8004cee <_svfiprintf_r+0x1b2>
 8004ca6:	9b03      	ldr	r3, [sp, #12]
 8004ca8:	3307      	adds	r3, #7
 8004caa:	f023 0307 	bic.w	r3, r3, #7
 8004cae:	3308      	adds	r3, #8
 8004cb0:	9303      	str	r3, [sp, #12]
 8004cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb4:	4433      	add	r3, r6
 8004cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb8:	e767      	b.n	8004b8a <_svfiprintf_r+0x4e>
 8004cba:	460c      	mov	r4, r1
 8004cbc:	2001      	movs	r0, #1
 8004cbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc2:	e7a5      	b.n	8004c10 <_svfiprintf_r+0xd4>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f04f 0c0a 	mov.w	ip, #10
 8004cca:	4619      	mov	r1, r3
 8004ccc:	3401      	adds	r4, #1
 8004cce:	9305      	str	r3, [sp, #20]
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd6:	3a30      	subs	r2, #48	; 0x30
 8004cd8:	2a09      	cmp	r2, #9
 8004cda:	d903      	bls.n	8004ce4 <_svfiprintf_r+0x1a8>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0c5      	beq.n	8004c6c <_svfiprintf_r+0x130>
 8004ce0:	9105      	str	r1, [sp, #20]
 8004ce2:	e7c3      	b.n	8004c6c <_svfiprintf_r+0x130>
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cec:	e7f0      	b.n	8004cd0 <_svfiprintf_r+0x194>
 8004cee:	ab03      	add	r3, sp, #12
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	462a      	mov	r2, r5
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	4b10      	ldr	r3, [pc, #64]	; (8004d38 <_svfiprintf_r+0x1fc>)
 8004cf8:	a904      	add	r1, sp, #16
 8004cfa:	f3af 8000 	nop.w
 8004cfe:	1c42      	adds	r2, r0, #1
 8004d00:	4606      	mov	r6, r0
 8004d02:	d1d6      	bne.n	8004cb2 <_svfiprintf_r+0x176>
 8004d04:	89ab      	ldrh	r3, [r5, #12]
 8004d06:	065b      	lsls	r3, r3, #25
 8004d08:	f53f af2c 	bmi.w	8004b64 <_svfiprintf_r+0x28>
 8004d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0e:	b01d      	add	sp, #116	; 0x74
 8004d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d14:	ab03      	add	r3, sp, #12
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	462a      	mov	r2, r5
 8004d1a:	4638      	mov	r0, r7
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <_svfiprintf_r+0x1fc>)
 8004d1e:	a904      	add	r1, sp, #16
 8004d20:	f000 f87c 	bl	8004e1c <_printf_i>
 8004d24:	e7eb      	b.n	8004cfe <_svfiprintf_r+0x1c2>
 8004d26:	bf00      	nop
 8004d28:	08005388 	.word	0x08005388
 8004d2c:	0800538e 	.word	0x0800538e
 8004d30:	08005392 	.word	0x08005392
 8004d34:	00000000 	.word	0x00000000
 8004d38:	08004a85 	.word	0x08004a85

08004d3c <_printf_common>:
 8004d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d40:	4616      	mov	r6, r2
 8004d42:	4699      	mov	r9, r3
 8004d44:	688a      	ldr	r2, [r1, #8]
 8004d46:	690b      	ldr	r3, [r1, #16]
 8004d48:	4607      	mov	r7, r0
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bfb8      	it	lt
 8004d4e:	4613      	movlt	r3, r2
 8004d50:	6033      	str	r3, [r6, #0]
 8004d52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d56:	460c      	mov	r4, r1
 8004d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d5c:	b10a      	cbz	r2, 8004d62 <_printf_common+0x26>
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6033      	str	r3, [r6, #0]
 8004d62:	6823      	ldr	r3, [r4, #0]
 8004d64:	0699      	lsls	r1, r3, #26
 8004d66:	bf42      	ittt	mi
 8004d68:	6833      	ldrmi	r3, [r6, #0]
 8004d6a:	3302      	addmi	r3, #2
 8004d6c:	6033      	strmi	r3, [r6, #0]
 8004d6e:	6825      	ldr	r5, [r4, #0]
 8004d70:	f015 0506 	ands.w	r5, r5, #6
 8004d74:	d106      	bne.n	8004d84 <_printf_common+0x48>
 8004d76:	f104 0a19 	add.w	sl, r4, #25
 8004d7a:	68e3      	ldr	r3, [r4, #12]
 8004d7c:	6832      	ldr	r2, [r6, #0]
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	dc28      	bgt.n	8004dd6 <_printf_common+0x9a>
 8004d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d88:	1e13      	subs	r3, r2, #0
 8004d8a:	6822      	ldr	r2, [r4, #0]
 8004d8c:	bf18      	it	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	0692      	lsls	r2, r2, #26
 8004d92:	d42d      	bmi.n	8004df0 <_printf_common+0xb4>
 8004d94:	4649      	mov	r1, r9
 8004d96:	4638      	mov	r0, r7
 8004d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d9c:	47c0      	blx	r8
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d020      	beq.n	8004de4 <_printf_common+0xa8>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	68e5      	ldr	r5, [r4, #12]
 8004da6:	f003 0306 	and.w	r3, r3, #6
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	bf18      	it	ne
 8004dae:	2500      	movne	r5, #0
 8004db0:	6832      	ldr	r2, [r6, #0]
 8004db2:	f04f 0600 	mov.w	r6, #0
 8004db6:	68a3      	ldr	r3, [r4, #8]
 8004db8:	bf08      	it	eq
 8004dba:	1aad      	subeq	r5, r5, r2
 8004dbc:	6922      	ldr	r2, [r4, #16]
 8004dbe:	bf08      	it	eq
 8004dc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	bfc4      	itt	gt
 8004dc8:	1a9b      	subgt	r3, r3, r2
 8004dca:	18ed      	addgt	r5, r5, r3
 8004dcc:	341a      	adds	r4, #26
 8004dce:	42b5      	cmp	r5, r6
 8004dd0:	d11a      	bne.n	8004e08 <_printf_common+0xcc>
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e008      	b.n	8004de8 <_printf_common+0xac>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4652      	mov	r2, sl
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4638      	mov	r0, r7
 8004dde:	47c0      	blx	r8
 8004de0:	3001      	adds	r0, #1
 8004de2:	d103      	bne.n	8004dec <_printf_common+0xb0>
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	3501      	adds	r5, #1
 8004dee:	e7c4      	b.n	8004d7a <_printf_common+0x3e>
 8004df0:	2030      	movs	r0, #48	; 0x30
 8004df2:	18e1      	adds	r1, r4, r3
 8004df4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dfe:	4422      	add	r2, r4
 8004e00:	3302      	adds	r3, #2
 8004e02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e06:	e7c5      	b.n	8004d94 <_printf_common+0x58>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4638      	mov	r0, r7
 8004e10:	47c0      	blx	r8
 8004e12:	3001      	adds	r0, #1
 8004e14:	d0e6      	beq.n	8004de4 <_printf_common+0xa8>
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7d9      	b.n	8004dce <_printf_common+0x92>
	...

08004e1c <_printf_i>:
 8004e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	7e0f      	ldrb	r7, [r1, #24]
 8004e22:	4691      	mov	r9, r2
 8004e24:	2f78      	cmp	r7, #120	; 0x78
 8004e26:	4680      	mov	r8, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	469a      	mov	sl, r3
 8004e2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e32:	d807      	bhi.n	8004e44 <_printf_i+0x28>
 8004e34:	2f62      	cmp	r7, #98	; 0x62
 8004e36:	d80a      	bhi.n	8004e4e <_printf_i+0x32>
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	f000 80d9 	beq.w	8004ff0 <_printf_i+0x1d4>
 8004e3e:	2f58      	cmp	r7, #88	; 0x58
 8004e40:	f000 80a4 	beq.w	8004f8c <_printf_i+0x170>
 8004e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e4c:	e03a      	b.n	8004ec4 <_printf_i+0xa8>
 8004e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e52:	2b15      	cmp	r3, #21
 8004e54:	d8f6      	bhi.n	8004e44 <_printf_i+0x28>
 8004e56:	a101      	add	r1, pc, #4	; (adr r1, 8004e5c <_printf_i+0x40>)
 8004e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e5c:	08004eb5 	.word	0x08004eb5
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004e45 	.word	0x08004e45
 8004e68:	08004e45 	.word	0x08004e45
 8004e6c:	08004e45 	.word	0x08004e45
 8004e70:	08004e45 	.word	0x08004e45
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e45 	.word	0x08004e45
 8004e7c:	08004e45 	.word	0x08004e45
 8004e80:	08004e45 	.word	0x08004e45
 8004e84:	08004e45 	.word	0x08004e45
 8004e88:	08004fd7 	.word	0x08004fd7
 8004e8c:	08004ef9 	.word	0x08004ef9
 8004e90:	08004fb9 	.word	0x08004fb9
 8004e94:	08004e45 	.word	0x08004e45
 8004e98:	08004e45 	.word	0x08004e45
 8004e9c:	08004ff9 	.word	0x08004ff9
 8004ea0:	08004e45 	.word	0x08004e45
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	08004e45 	.word	0x08004e45
 8004eac:	08004e45 	.word	0x08004e45
 8004eb0:	08004fc1 	.word	0x08004fc1
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	602a      	str	r2, [r5, #0]
 8004ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0a4      	b.n	8005012 <_printf_i+0x1f6>
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	6829      	ldr	r1, [r5, #0]
 8004ecc:	0606      	lsls	r6, r0, #24
 8004ece:	f101 0304 	add.w	r3, r1, #4
 8004ed2:	d50a      	bpl.n	8004eea <_printf_i+0xce>
 8004ed4:	680e      	ldr	r6, [r1, #0]
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	2e00      	cmp	r6, #0
 8004eda:	da03      	bge.n	8004ee4 <_printf_i+0xc8>
 8004edc:	232d      	movs	r3, #45	; 0x2d
 8004ede:	4276      	negs	r6, r6
 8004ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee4:	230a      	movs	r3, #10
 8004ee6:	485e      	ldr	r0, [pc, #376]	; (8005060 <_printf_i+0x244>)
 8004ee8:	e019      	b.n	8004f1e <_printf_i+0x102>
 8004eea:	680e      	ldr	r6, [r1, #0]
 8004eec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	bf18      	it	ne
 8004ef4:	b236      	sxthne	r6, r6
 8004ef6:	e7ef      	b.n	8004ed8 <_printf_i+0xbc>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	6820      	ldr	r0, [r4, #0]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	6029      	str	r1, [r5, #0]
 8004f00:	0601      	lsls	r1, r0, #24
 8004f02:	d501      	bpl.n	8004f08 <_printf_i+0xec>
 8004f04:	681e      	ldr	r6, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <_printf_i+0xf2>
 8004f08:	0646      	lsls	r6, r0, #25
 8004f0a:	d5fb      	bpl.n	8004f04 <_printf_i+0xe8>
 8004f0c:	881e      	ldrh	r6, [r3, #0]
 8004f0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004f10:	bf0c      	ite	eq
 8004f12:	2308      	moveq	r3, #8
 8004f14:	230a      	movne	r3, #10
 8004f16:	4852      	ldr	r0, [pc, #328]	; (8005060 <_printf_i+0x244>)
 8004f18:	2100      	movs	r1, #0
 8004f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1e:	6865      	ldr	r5, [r4, #4]
 8004f20:	2d00      	cmp	r5, #0
 8004f22:	bfa8      	it	ge
 8004f24:	6821      	ldrge	r1, [r4, #0]
 8004f26:	60a5      	str	r5, [r4, #8]
 8004f28:	bfa4      	itt	ge
 8004f2a:	f021 0104 	bicge.w	r1, r1, #4
 8004f2e:	6021      	strge	r1, [r4, #0]
 8004f30:	b90e      	cbnz	r6, 8004f36 <_printf_i+0x11a>
 8004f32:	2d00      	cmp	r5, #0
 8004f34:	d04d      	beq.n	8004fd2 <_printf_i+0x1b6>
 8004f36:	4615      	mov	r5, r2
 8004f38:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f3c:	fb03 6711 	mls	r7, r3, r1, r6
 8004f40:	5dc7      	ldrb	r7, [r0, r7]
 8004f42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f46:	4637      	mov	r7, r6
 8004f48:	42bb      	cmp	r3, r7
 8004f4a:	460e      	mov	r6, r1
 8004f4c:	d9f4      	bls.n	8004f38 <_printf_i+0x11c>
 8004f4e:	2b08      	cmp	r3, #8
 8004f50:	d10b      	bne.n	8004f6a <_printf_i+0x14e>
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	07de      	lsls	r6, r3, #31
 8004f56:	d508      	bpl.n	8004f6a <_printf_i+0x14e>
 8004f58:	6923      	ldr	r3, [r4, #16]
 8004f5a:	6861      	ldr	r1, [r4, #4]
 8004f5c:	4299      	cmp	r1, r3
 8004f5e:	bfde      	ittt	le
 8004f60:	2330      	movle	r3, #48	; 0x30
 8004f62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f6a:	1b52      	subs	r2, r2, r5
 8004f6c:	6122      	str	r2, [r4, #16]
 8004f6e:	464b      	mov	r3, r9
 8004f70:	4621      	mov	r1, r4
 8004f72:	4640      	mov	r0, r8
 8004f74:	f8cd a000 	str.w	sl, [sp]
 8004f78:	aa03      	add	r2, sp, #12
 8004f7a:	f7ff fedf 	bl	8004d3c <_printf_common>
 8004f7e:	3001      	adds	r0, #1
 8004f80:	d14c      	bne.n	800501c <_printf_i+0x200>
 8004f82:	f04f 30ff 	mov.w	r0, #4294967295
 8004f86:	b004      	add	sp, #16
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	4834      	ldr	r0, [pc, #208]	; (8005060 <_printf_i+0x244>)
 8004f8e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f92:	6829      	ldr	r1, [r5, #0]
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f9a:	6029      	str	r1, [r5, #0]
 8004f9c:	061d      	lsls	r5, r3, #24
 8004f9e:	d514      	bpl.n	8004fca <_printf_i+0x1ae>
 8004fa0:	07df      	lsls	r7, r3, #31
 8004fa2:	bf44      	itt	mi
 8004fa4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa8:	6023      	strmi	r3, [r4, #0]
 8004faa:	b91e      	cbnz	r6, 8004fb4 <_printf_i+0x198>
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	f023 0320 	bic.w	r3, r3, #32
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	e7af      	b.n	8004f18 <_printf_i+0xfc>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	f043 0320 	orr.w	r3, r3, #32
 8004fbe:	6023      	str	r3, [r4, #0]
 8004fc0:	2378      	movs	r3, #120	; 0x78
 8004fc2:	4828      	ldr	r0, [pc, #160]	; (8005064 <_printf_i+0x248>)
 8004fc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fc8:	e7e3      	b.n	8004f92 <_printf_i+0x176>
 8004fca:	0659      	lsls	r1, r3, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2b6      	uxthmi	r6, r6
 8004fd0:	e7e6      	b.n	8004fa0 <_printf_i+0x184>
 8004fd2:	4615      	mov	r5, r2
 8004fd4:	e7bb      	b.n	8004f4e <_printf_i+0x132>
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	6826      	ldr	r6, [r4, #0]
 8004fda:	1d18      	adds	r0, r3, #4
 8004fdc:	6961      	ldr	r1, [r4, #20]
 8004fde:	6028      	str	r0, [r5, #0]
 8004fe0:	0635      	lsls	r5, r6, #24
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	d501      	bpl.n	8004fea <_printf_i+0x1ce>
 8004fe6:	6019      	str	r1, [r3, #0]
 8004fe8:	e002      	b.n	8004ff0 <_printf_i+0x1d4>
 8004fea:	0670      	lsls	r0, r6, #25
 8004fec:	d5fb      	bpl.n	8004fe6 <_printf_i+0x1ca>
 8004fee:	8019      	strh	r1, [r3, #0]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	4615      	mov	r5, r2
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	e7ba      	b.n	8004f6e <_printf_i+0x152>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	1d1a      	adds	r2, r3, #4
 8004ffe:	602a      	str	r2, [r5, #0]
 8005000:	681d      	ldr	r5, [r3, #0]
 8005002:	6862      	ldr	r2, [r4, #4]
 8005004:	4628      	mov	r0, r5
 8005006:	f000 f82f 	bl	8005068 <memchr>
 800500a:	b108      	cbz	r0, 8005010 <_printf_i+0x1f4>
 800500c:	1b40      	subs	r0, r0, r5
 800500e:	6060      	str	r0, [r4, #4]
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	6123      	str	r3, [r4, #16]
 8005014:	2300      	movs	r3, #0
 8005016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800501a:	e7a8      	b.n	8004f6e <_printf_i+0x152>
 800501c:	462a      	mov	r2, r5
 800501e:	4649      	mov	r1, r9
 8005020:	4640      	mov	r0, r8
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	47d0      	blx	sl
 8005026:	3001      	adds	r0, #1
 8005028:	d0ab      	beq.n	8004f82 <_printf_i+0x166>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	079b      	lsls	r3, r3, #30
 800502e:	d413      	bmi.n	8005058 <_printf_i+0x23c>
 8005030:	68e0      	ldr	r0, [r4, #12]
 8005032:	9b03      	ldr	r3, [sp, #12]
 8005034:	4298      	cmp	r0, r3
 8005036:	bfb8      	it	lt
 8005038:	4618      	movlt	r0, r3
 800503a:	e7a4      	b.n	8004f86 <_printf_i+0x16a>
 800503c:	2301      	movs	r3, #1
 800503e:	4632      	mov	r2, r6
 8005040:	4649      	mov	r1, r9
 8005042:	4640      	mov	r0, r8
 8005044:	47d0      	blx	sl
 8005046:	3001      	adds	r0, #1
 8005048:	d09b      	beq.n	8004f82 <_printf_i+0x166>
 800504a:	3501      	adds	r5, #1
 800504c:	68e3      	ldr	r3, [r4, #12]
 800504e:	9903      	ldr	r1, [sp, #12]
 8005050:	1a5b      	subs	r3, r3, r1
 8005052:	42ab      	cmp	r3, r5
 8005054:	dcf2      	bgt.n	800503c <_printf_i+0x220>
 8005056:	e7eb      	b.n	8005030 <_printf_i+0x214>
 8005058:	2500      	movs	r5, #0
 800505a:	f104 0619 	add.w	r6, r4, #25
 800505e:	e7f5      	b.n	800504c <_printf_i+0x230>
 8005060:	08005399 	.word	0x08005399
 8005064:	080053aa 	.word	0x080053aa

08005068 <memchr>:
 8005068:	4603      	mov	r3, r0
 800506a:	b510      	push	{r4, lr}
 800506c:	b2c9      	uxtb	r1, r1
 800506e:	4402      	add	r2, r0
 8005070:	4293      	cmp	r3, r2
 8005072:	4618      	mov	r0, r3
 8005074:	d101      	bne.n	800507a <memchr+0x12>
 8005076:	2000      	movs	r0, #0
 8005078:	e003      	b.n	8005082 <memchr+0x1a>
 800507a:	7804      	ldrb	r4, [r0, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	428c      	cmp	r4, r1
 8005080:	d1f6      	bne.n	8005070 <memchr+0x8>
 8005082:	bd10      	pop	{r4, pc}

08005084 <memcpy>:
 8005084:	440a      	add	r2, r1
 8005086:	4291      	cmp	r1, r2
 8005088:	f100 33ff 	add.w	r3, r0, #4294967295
 800508c:	d100      	bne.n	8005090 <memcpy+0xc>
 800508e:	4770      	bx	lr
 8005090:	b510      	push	{r4, lr}
 8005092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005096:	4291      	cmp	r1, r2
 8005098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800509c:	d1f9      	bne.n	8005092 <memcpy+0xe>
 800509e:	bd10      	pop	{r4, pc}

080050a0 <memmove>:
 80050a0:	4288      	cmp	r0, r1
 80050a2:	b510      	push	{r4, lr}
 80050a4:	eb01 0402 	add.w	r4, r1, r2
 80050a8:	d902      	bls.n	80050b0 <memmove+0x10>
 80050aa:	4284      	cmp	r4, r0
 80050ac:	4623      	mov	r3, r4
 80050ae:	d807      	bhi.n	80050c0 <memmove+0x20>
 80050b0:	1e43      	subs	r3, r0, #1
 80050b2:	42a1      	cmp	r1, r4
 80050b4:	d008      	beq.n	80050c8 <memmove+0x28>
 80050b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050be:	e7f8      	b.n	80050b2 <memmove+0x12>
 80050c0:	4601      	mov	r1, r0
 80050c2:	4402      	add	r2, r0
 80050c4:	428a      	cmp	r2, r1
 80050c6:	d100      	bne.n	80050ca <memmove+0x2a>
 80050c8:	bd10      	pop	{r4, pc}
 80050ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050d2:	e7f7      	b.n	80050c4 <memmove+0x24>

080050d4 <_free_r>:
 80050d4:	b538      	push	{r3, r4, r5, lr}
 80050d6:	4605      	mov	r5, r0
 80050d8:	2900      	cmp	r1, #0
 80050da:	d040      	beq.n	800515e <_free_r+0x8a>
 80050dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050e0:	1f0c      	subs	r4, r1, #4
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bfb8      	it	lt
 80050e6:	18e4      	addlt	r4, r4, r3
 80050e8:	f000 f910 	bl	800530c <__malloc_lock>
 80050ec:	4a1c      	ldr	r2, [pc, #112]	; (8005160 <_free_r+0x8c>)
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	b933      	cbnz	r3, 8005100 <_free_r+0x2c>
 80050f2:	6063      	str	r3, [r4, #4]
 80050f4:	6014      	str	r4, [r2, #0]
 80050f6:	4628      	mov	r0, r5
 80050f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050fc:	f000 b90c 	b.w	8005318 <__malloc_unlock>
 8005100:	42a3      	cmp	r3, r4
 8005102:	d908      	bls.n	8005116 <_free_r+0x42>
 8005104:	6820      	ldr	r0, [r4, #0]
 8005106:	1821      	adds	r1, r4, r0
 8005108:	428b      	cmp	r3, r1
 800510a:	bf01      	itttt	eq
 800510c:	6819      	ldreq	r1, [r3, #0]
 800510e:	685b      	ldreq	r3, [r3, #4]
 8005110:	1809      	addeq	r1, r1, r0
 8005112:	6021      	streq	r1, [r4, #0]
 8005114:	e7ed      	b.n	80050f2 <_free_r+0x1e>
 8005116:	461a      	mov	r2, r3
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	b10b      	cbz	r3, 8005120 <_free_r+0x4c>
 800511c:	42a3      	cmp	r3, r4
 800511e:	d9fa      	bls.n	8005116 <_free_r+0x42>
 8005120:	6811      	ldr	r1, [r2, #0]
 8005122:	1850      	adds	r0, r2, r1
 8005124:	42a0      	cmp	r0, r4
 8005126:	d10b      	bne.n	8005140 <_free_r+0x6c>
 8005128:	6820      	ldr	r0, [r4, #0]
 800512a:	4401      	add	r1, r0
 800512c:	1850      	adds	r0, r2, r1
 800512e:	4283      	cmp	r3, r0
 8005130:	6011      	str	r1, [r2, #0]
 8005132:	d1e0      	bne.n	80050f6 <_free_r+0x22>
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	4401      	add	r1, r0
 800513a:	6011      	str	r1, [r2, #0]
 800513c:	6053      	str	r3, [r2, #4]
 800513e:	e7da      	b.n	80050f6 <_free_r+0x22>
 8005140:	d902      	bls.n	8005148 <_free_r+0x74>
 8005142:	230c      	movs	r3, #12
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	e7d6      	b.n	80050f6 <_free_r+0x22>
 8005148:	6820      	ldr	r0, [r4, #0]
 800514a:	1821      	adds	r1, r4, r0
 800514c:	428b      	cmp	r3, r1
 800514e:	bf01      	itttt	eq
 8005150:	6819      	ldreq	r1, [r3, #0]
 8005152:	685b      	ldreq	r3, [r3, #4]
 8005154:	1809      	addeq	r1, r1, r0
 8005156:	6021      	streq	r1, [r4, #0]
 8005158:	6063      	str	r3, [r4, #4]
 800515a:	6054      	str	r4, [r2, #4]
 800515c:	e7cb      	b.n	80050f6 <_free_r+0x22>
 800515e:	bd38      	pop	{r3, r4, r5, pc}
 8005160:	20000544 	.word	0x20000544

08005164 <sbrk_aligned>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4e0e      	ldr	r6, [pc, #56]	; (80051a0 <sbrk_aligned+0x3c>)
 8005168:	460c      	mov	r4, r1
 800516a:	6831      	ldr	r1, [r6, #0]
 800516c:	4605      	mov	r5, r0
 800516e:	b911      	cbnz	r1, 8005176 <sbrk_aligned+0x12>
 8005170:	f000 f8bc 	bl	80052ec <_sbrk_r>
 8005174:	6030      	str	r0, [r6, #0]
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f8b7 	bl	80052ec <_sbrk_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d00a      	beq.n	8005198 <sbrk_aligned+0x34>
 8005182:	1cc4      	adds	r4, r0, #3
 8005184:	f024 0403 	bic.w	r4, r4, #3
 8005188:	42a0      	cmp	r0, r4
 800518a:	d007      	beq.n	800519c <sbrk_aligned+0x38>
 800518c:	1a21      	subs	r1, r4, r0
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f8ac 	bl	80052ec <_sbrk_r>
 8005194:	3001      	adds	r0, #1
 8005196:	d101      	bne.n	800519c <sbrk_aligned+0x38>
 8005198:	f04f 34ff 	mov.w	r4, #4294967295
 800519c:	4620      	mov	r0, r4
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	20000548 	.word	0x20000548

080051a4 <_malloc_r>:
 80051a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a8:	1ccd      	adds	r5, r1, #3
 80051aa:	f025 0503 	bic.w	r5, r5, #3
 80051ae:	3508      	adds	r5, #8
 80051b0:	2d0c      	cmp	r5, #12
 80051b2:	bf38      	it	cc
 80051b4:	250c      	movcc	r5, #12
 80051b6:	2d00      	cmp	r5, #0
 80051b8:	4607      	mov	r7, r0
 80051ba:	db01      	blt.n	80051c0 <_malloc_r+0x1c>
 80051bc:	42a9      	cmp	r1, r5
 80051be:	d905      	bls.n	80051cc <_malloc_r+0x28>
 80051c0:	230c      	movs	r3, #12
 80051c2:	2600      	movs	r6, #0
 80051c4:	603b      	str	r3, [r7, #0]
 80051c6:	4630      	mov	r0, r6
 80051c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051cc:	4e2e      	ldr	r6, [pc, #184]	; (8005288 <_malloc_r+0xe4>)
 80051ce:	f000 f89d 	bl	800530c <__malloc_lock>
 80051d2:	6833      	ldr	r3, [r6, #0]
 80051d4:	461c      	mov	r4, r3
 80051d6:	bb34      	cbnz	r4, 8005226 <_malloc_r+0x82>
 80051d8:	4629      	mov	r1, r5
 80051da:	4638      	mov	r0, r7
 80051dc:	f7ff ffc2 	bl	8005164 <sbrk_aligned>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	4604      	mov	r4, r0
 80051e4:	d14d      	bne.n	8005282 <_malloc_r+0xde>
 80051e6:	6834      	ldr	r4, [r6, #0]
 80051e8:	4626      	mov	r6, r4
 80051ea:	2e00      	cmp	r6, #0
 80051ec:	d140      	bne.n	8005270 <_malloc_r+0xcc>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	4631      	mov	r1, r6
 80051f2:	4638      	mov	r0, r7
 80051f4:	eb04 0803 	add.w	r8, r4, r3
 80051f8:	f000 f878 	bl	80052ec <_sbrk_r>
 80051fc:	4580      	cmp	r8, r0
 80051fe:	d13a      	bne.n	8005276 <_malloc_r+0xd2>
 8005200:	6821      	ldr	r1, [r4, #0]
 8005202:	3503      	adds	r5, #3
 8005204:	1a6d      	subs	r5, r5, r1
 8005206:	f025 0503 	bic.w	r5, r5, #3
 800520a:	3508      	adds	r5, #8
 800520c:	2d0c      	cmp	r5, #12
 800520e:	bf38      	it	cc
 8005210:	250c      	movcc	r5, #12
 8005212:	4638      	mov	r0, r7
 8005214:	4629      	mov	r1, r5
 8005216:	f7ff ffa5 	bl	8005164 <sbrk_aligned>
 800521a:	3001      	adds	r0, #1
 800521c:	d02b      	beq.n	8005276 <_malloc_r+0xd2>
 800521e:	6823      	ldr	r3, [r4, #0]
 8005220:	442b      	add	r3, r5
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	e00e      	b.n	8005244 <_malloc_r+0xa0>
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	1b52      	subs	r2, r2, r5
 800522a:	d41e      	bmi.n	800526a <_malloc_r+0xc6>
 800522c:	2a0b      	cmp	r2, #11
 800522e:	d916      	bls.n	800525e <_malloc_r+0xba>
 8005230:	1961      	adds	r1, r4, r5
 8005232:	42a3      	cmp	r3, r4
 8005234:	6025      	str	r5, [r4, #0]
 8005236:	bf18      	it	ne
 8005238:	6059      	strne	r1, [r3, #4]
 800523a:	6863      	ldr	r3, [r4, #4]
 800523c:	bf08      	it	eq
 800523e:	6031      	streq	r1, [r6, #0]
 8005240:	5162      	str	r2, [r4, r5]
 8005242:	604b      	str	r3, [r1, #4]
 8005244:	4638      	mov	r0, r7
 8005246:	f104 060b 	add.w	r6, r4, #11
 800524a:	f000 f865 	bl	8005318 <__malloc_unlock>
 800524e:	f026 0607 	bic.w	r6, r6, #7
 8005252:	1d23      	adds	r3, r4, #4
 8005254:	1af2      	subs	r2, r6, r3
 8005256:	d0b6      	beq.n	80051c6 <_malloc_r+0x22>
 8005258:	1b9b      	subs	r3, r3, r6
 800525a:	50a3      	str	r3, [r4, r2]
 800525c:	e7b3      	b.n	80051c6 <_malloc_r+0x22>
 800525e:	6862      	ldr	r2, [r4, #4]
 8005260:	42a3      	cmp	r3, r4
 8005262:	bf0c      	ite	eq
 8005264:	6032      	streq	r2, [r6, #0]
 8005266:	605a      	strne	r2, [r3, #4]
 8005268:	e7ec      	b.n	8005244 <_malloc_r+0xa0>
 800526a:	4623      	mov	r3, r4
 800526c:	6864      	ldr	r4, [r4, #4]
 800526e:	e7b2      	b.n	80051d6 <_malloc_r+0x32>
 8005270:	4634      	mov	r4, r6
 8005272:	6876      	ldr	r6, [r6, #4]
 8005274:	e7b9      	b.n	80051ea <_malloc_r+0x46>
 8005276:	230c      	movs	r3, #12
 8005278:	4638      	mov	r0, r7
 800527a:	603b      	str	r3, [r7, #0]
 800527c:	f000 f84c 	bl	8005318 <__malloc_unlock>
 8005280:	e7a1      	b.n	80051c6 <_malloc_r+0x22>
 8005282:	6025      	str	r5, [r4, #0]
 8005284:	e7de      	b.n	8005244 <_malloc_r+0xa0>
 8005286:	bf00      	nop
 8005288:	20000544 	.word	0x20000544

0800528c <_realloc_r>:
 800528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005290:	4680      	mov	r8, r0
 8005292:	4614      	mov	r4, r2
 8005294:	460e      	mov	r6, r1
 8005296:	b921      	cbnz	r1, 80052a2 <_realloc_r+0x16>
 8005298:	4611      	mov	r1, r2
 800529a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800529e:	f7ff bf81 	b.w	80051a4 <_malloc_r>
 80052a2:	b92a      	cbnz	r2, 80052b0 <_realloc_r+0x24>
 80052a4:	f7ff ff16 	bl	80050d4 <_free_r>
 80052a8:	4625      	mov	r5, r4
 80052aa:	4628      	mov	r0, r5
 80052ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b0:	f000 f838 	bl	8005324 <_malloc_usable_size_r>
 80052b4:	4284      	cmp	r4, r0
 80052b6:	4607      	mov	r7, r0
 80052b8:	d802      	bhi.n	80052c0 <_realloc_r+0x34>
 80052ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052be:	d812      	bhi.n	80052e6 <_realloc_r+0x5a>
 80052c0:	4621      	mov	r1, r4
 80052c2:	4640      	mov	r0, r8
 80052c4:	f7ff ff6e 	bl	80051a4 <_malloc_r>
 80052c8:	4605      	mov	r5, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d0ed      	beq.n	80052aa <_realloc_r+0x1e>
 80052ce:	42bc      	cmp	r4, r7
 80052d0:	4622      	mov	r2, r4
 80052d2:	4631      	mov	r1, r6
 80052d4:	bf28      	it	cs
 80052d6:	463a      	movcs	r2, r7
 80052d8:	f7ff fed4 	bl	8005084 <memcpy>
 80052dc:	4631      	mov	r1, r6
 80052de:	4640      	mov	r0, r8
 80052e0:	f7ff fef8 	bl	80050d4 <_free_r>
 80052e4:	e7e1      	b.n	80052aa <_realloc_r+0x1e>
 80052e6:	4635      	mov	r5, r6
 80052e8:	e7df      	b.n	80052aa <_realloc_r+0x1e>
	...

080052ec <_sbrk_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	2300      	movs	r3, #0
 80052f0:	4d05      	ldr	r5, [pc, #20]	; (8005308 <_sbrk_r+0x1c>)
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7fc fcf6 	bl	8001ce8 <_sbrk>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_sbrk_r+0x1a>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_sbrk_r+0x1a>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	2000054c 	.word	0x2000054c

0800530c <__malloc_lock>:
 800530c:	4801      	ldr	r0, [pc, #4]	; (8005314 <__malloc_lock+0x8>)
 800530e:	f000 b811 	b.w	8005334 <__retarget_lock_acquire_recursive>
 8005312:	bf00      	nop
 8005314:	20000550 	.word	0x20000550

08005318 <__malloc_unlock>:
 8005318:	4801      	ldr	r0, [pc, #4]	; (8005320 <__malloc_unlock+0x8>)
 800531a:	f000 b80c 	b.w	8005336 <__retarget_lock_release_recursive>
 800531e:	bf00      	nop
 8005320:	20000550 	.word	0x20000550

08005324 <_malloc_usable_size_r>:
 8005324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005328:	1f18      	subs	r0, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	bfbc      	itt	lt
 800532e:	580b      	ldrlt	r3, [r1, r0]
 8005330:	18c0      	addlt	r0, r0, r3
 8005332:	4770      	bx	lr

08005334 <__retarget_lock_acquire_recursive>:
 8005334:	4770      	bx	lr

08005336 <__retarget_lock_release_recursive>:
 8005336:	4770      	bx	lr

08005338 <_init>:
 8005338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533a:	bf00      	nop
 800533c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533e:	bc08      	pop	{r3}
 8005340:	469e      	mov	lr, r3
 8005342:	4770      	bx	lr

08005344 <_fini>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr
